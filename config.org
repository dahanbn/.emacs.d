# -*- mode: org; coding: utf-8; -*-
#+LANGUAGE: en
#+TODO: ACTIVE | DISABLED
#+STARTUP: align fold nodlcheck lognotestate content

This config file is hosted on Github under GPL, v3. You can find it here:
- https://github.com/dahanbn/.emacs.d

It should work under Linux (tested), Mac (not tested) and a recent Windows in a
portable setup (tested). For my portable setup you can look at the following
repo:
- https://github.com/dahanbn/portable-emacs-win64
- https://magit.vc/manual/magit/index.html#SEC_Contents

*Warning:* Some headings have the status ~DISABLED~. They don't will be tangled
into ~config.el~. Unfortunately, Github doesn't display that status here. To be
sure you should look at ~config.org~ best within Emacs or as a raw file [[https://raw.githubusercontent.com/dahanbn/.emacs.d/master/config.org][here]].

I am still learning Magit therefore here links to its documentation:
- https://magit.vc/manual/magit/Getting-Started.html#Getting-Started
- https://magit.vc/manual/magit/index.html

Either use ~magit-status~ or ~magit-list-repositories~.

After launching ~magit-status~ with ~C-x g~ you can manage all git actions in
that status buffer. You can see available commands with ~C-c C-c~.

Usually you would:
+ move between sections using ~p~ and ~n~
+ stage changed files with ~s~ or unstage with ~u~
+ ~g~ to refresh the buffer, if needed
+ hit tab on a file to see hunks of the changes
+ to commit hit ~c~ and to do a "normal" commit hit ~c~ again
+ write the commit message in the message buffer and press ~C-c C-c~
+ to push those commits type ~P~ followed by ~p~
+ to get *help* type ~h~

~magit-list-repositories~ will show you all known repositories and there status. 
With ~ret~ I  can switch into a more detailed view of the repository. 
The list repository buffer can be updated with ~g~.

* Links to useful Emacs related stuff

NÃ¼tzliche Configs im WWW:
- http://writequit.org/org/settings.html
- http://doc.norang.ca/org-mode.html
- http://pages.sachachua.com/.emacs.d/Sacha.html
- https://github.com/novoid/dot-emacs
- https://github.com/purcell/emacs.d

- https://github.com/grettke/help

Ideas for faster loading and use-package:
- https://github.com/jwiegley/use-package
- https://github.com/nilcons/emacs-use-package-fast

ELisp guide:
- https://github.com/chrisdone/elisp-guide


* Key bindings & commands
Exported stands for exported to Anki! To export a table use M-x org-table-export.
The default export format is orgtbl-to-tsv and I can use it perfectly with Anki.

To edit various table entries I can use multiple cursors or macros F3 F4
** Useful standard key bindings
| kbd       | command                              | description                                                                                 | scope       | package | tags | exported |
|-----------+--------------------------------------+---------------------------------------------------------------------------------------------+-------------+---------+------+----------|
| C-f       | forward-char                         | Move forward one character (right)                                                          | Motion      |         |      | X        |
| C-b       | backward-char                        | Move backwards one character (left)                                                         | Motion      |         |      | X        |
| C-p       | previous-line                        | Move to previous line (up)                                                                  | Motion      |         |      | X        |
| C-n       | next-line                            | Move to next line (down)                                                                    | Motion      |         |      | X        |
| M-f       | forward-word                         | Move on word forward                                                                        | Motion      |         |      | X        |
| M-b       | backward-word                        | Move one word backward                                                                      | Motion      |         |      | X        |
| C-a       | beginning-of-line                    | Move to beginning of line                                                                   | Motion      |         |      | X        |
| C-e       | end-of-line                          | Move to end of line                                                                         | Motion      |         |      | X        |
| M-e       | forward-sentence                     | Move forward one sentence                                                                   | Motion      |         |      | X        |
| M-a       | backward-sentence                    | Move backward on sentence                                                                   | Motion      |         |      | X        |
| M-{       | forward-paragraph                    | Move forward one paragraph                                                                  | Motion      |         |      | X        |
| M-}       | backward-paragraph                   | Move backward one paragraph                                                                 | Motion      |         |      | X        |
| C-v       | scroll-up                            | Move forward one screen                                                                     | Motion      |         |      | X        |
| M-v       | scroll-down                          | Move backward one screen                                                                    | Motion      |         |      | X        |
| C-x ]     | forward-page                         | Move forward one page                                                                       | Motion      |         |      | X        |
| C-x [     | backward-page                        | Move backward one page                                                                      | Motion      |         |      | X        |
| M-<       | beginning-of-buffer                  | Move to beginning of file                                                                   | Motion      |         |      | X        |
| M->       | end-of-buffer                        | Move to end of file                                                                         | Motion      |         |      | X        |
| C-l       | recenter                             | Redraw screen with current line in the center                                               | Motion      |         |      | X        |
| M-n       | digit-argument                       | Repeat the next command n times                                                             | Repetition  |         |      | X        |
| C-u n     | universal-argument                   | Repeat the next command n times (four times without n)                                      | Repetition  |         |      | X        |
| C-o       | open-line                            | Opens a new line at the cursor position                                                     | Editing     |         |      | X        |
| M-g g     | goto-line                            | Go to line n of file                                                                        | Motion      |         |      | X        |
| M-g c     | goto-char                            | Go to character n of file                                                                   | Motion      |         |      | X        |
| C-h k     | describe-key                         | shows the command that a key runs                                                           | Help        |         |      | X        |
| C-h f     | describe-function                    | describes a function                                                                        | Help        |         |      | X        |
| C-h v     | describe-variable                    | describes a variable                                                                        | Help        |         |      | X        |
| C-h ?     | help-for-help                        | describes the various help functions                                                        | Help        |         |      | X        |
| C-h m     | describe-mode                        | Display documentation of current major mode and minor modes.                                | Help        |         |      | X        |
| C-M-v     | scroll-other-window                  | scrolls the other window / help window                                                      | Windows     |         |      | X        |
| C-x C-s   | save-buffer                          | saves a file back to disk                                                                   | Files       |         |      | X        |
| C-x C-f   | find-file                            | read a file into Emacs                                                                      | Files       |         |      | X        |
| C-x s     | save-some-buffers                    | Save some modified file-visiting buffers.  Asks user about each one.                        | Files       |         |      | X        |
| C-x i     | insert-file                          | Insert contents of file FILENAME into buffer after point. Set mark after the inserted text. | Files       |         |      | X        |
| C-x C-v   | find-alternate-file                  | Find file FILENAME, select its buffer, kill previous buffer.                                | Files       |         |      | X        |
| C-x C-w   | write file                           | Write current buffer into file FILENAME.                                                    | Files       |         |      | X        |
| C-x 0     | delete-windows                       | delete this window                                                                          | Windows     |         |      | X        |
| C-x 1     | delete-other-windows                 | delete all other windows                                                                    | Windows     |         |      | X        |
| C-x 2     | split-window-below                   | split window, above and below                                                               | Windows     |         |      | X        |
| C-x 3     | split-window-right                   | split window, side by side                                                                  | Windows     |         |      | X        |
| C-x o     | other-window                         | switch cursor to another window                                                             | Windows     |         |      | X        |
| C-x h     | mark-whole-buffer                    | mark all text in the buffer                                                                 | Selecting   |         |      | X        |
| F3        | kmacro-start-macro-or-insert-counter | start definining a macro or insert a counter during recording a macro                       | Macros      |         |      | X        |
| F4        | kmacro-end-or-call-macro             | end the definition of a macro or executes the most recent one                               | Macros      |         |      | X        |
| C-x C-k r | apply-macro-to-region-lines          | Run the last keyboard macro on each line that begins in the region                          | Macros      |         |      | X        |
| M-d       | kill-word                            | kill word forward                                                                           | Cut & Paste |         |      | X        |
| M-DEL     | backward-kill-word                   | kill word backward                                                                          | Cut & Paste |         |      | X        |
| C-k       | kill-line                            | kill to the end of line                                                                     | Cut & Paste |         |      | X        |
|           |                                      |                                                                                             |             |         |      |          |

** Useful commands without key bindings
| command          | description                                               | scope  | package | tags | exported |
|------------------+-----------------------------------------------------------+--------+---------+------+----------|
| org-table-export | exports an OrgTbl                                         | OrgTbl | org     |      | X        |
| org-table-import | imports a table into OrgTbl. Items must be tabs-separated | OrgTbl | org     |      | X        |
| org-info         | read the org documentation                                | Org    | org     |      | X        |
|                  |                                                           |        |         |      |          |

** Custom key bindings
| kbd              | command                        | description                                                                                             | scope       | package          | tags | exported |
|------------------+--------------------------------+---------------------------------------------------------------------------------------------------------+-------------+------------------+------+----------|
| C-j              | iedit-mode                     | edits all occurencies of the word under the point                                                       | Multiple    | iedit            |      | X        |
| C-x C-r          | recentf-open-files             | shows the recently opened files                                                                         | Files       | recentf          |      | X        |
| C-S-o            | dh/insert-line-before          | Saves the cursor position and inserts a new line (or multiple with C-n as prefix)                       | Repetition  | dh/custom        |      | X        |
| C->              | mc/mark-next-like-this         | Adds a cursor and region at the next part of the buffer forwards that matches the current region        | Multiple    | multiple-cursors |      | X        |
| C-<              | mc/mark-previous-like-this     | Adds a cursor and region at the next part of the buffer backwards that matches the current region       | Multiple    | multiple-cursors |      | X        |
| C-S-<mouse-1>    | mc/add-cursor-on-click         | adds a multiple cursor by clicking                                                                      | Multiple    | multiple-cursors |      | X        |
| C-x d            | dh/visit-favourite-directories | ido listing of predefined favourite directories (overwrites dired mapping / with prefix it lists files) | Files       | dh/custom        |      | X        |
| C-u C-x d        | dh/visit-favourite-directories | ido listing of files predefined favourite directories (C-u is prefix argument)                          | Files       | dh/custom        |      | X        |
| M-p              | ace-window                     | easier switching between more windows in an Emacs frame                                                 | Windows     | ace-window       |      | X        |
| C-u M-p          | ace-window                     | wap windows by calling ace-window with a prefix argument                                                | Windows     | ace-window       |      | X        |
| C-u C-u M-p      | ace-window                     | delete the selected window by calling ace-window with a double prefix argument                          | Windows     | ace-window       |      | X        |
| M-o              | ace-org-link                   | quickly jumping to different links in an org-file                                                       | Links       | ace-link         |      | X        |
| o (in help-mode) | ace-link-help                  | quickly jumping to different links (l is back)                                                          | Links       | ace-link         |      | X        |
| o (in Info-mode) | ace-link-info                  | quickly jumping to different links (l is back)                                                          | Links       | ace-link         |      | X        |
| M-up             | move-text-up                   | moves the line or selected region up (works also in org-mode)                                           | Motion      | move-text        |      | X        |
| M-down           | move-text-down                 | moves the line or selected region down (works also in org-mode)                                         | Motion      | move-text        |      | X        |
| M-y              | browse-kill-ring               | a visual approach to see & select content of the kill ring                                              | Cut & Paste | browse-kill-ring |      | X        |
| C-x g            | google-this-mode-submap        | shows various options to start a google search in the default browser                                   | Search      | google-this      |      | X        |
| M-j              | join-line                      | joins the following line onto this one                                                                  | Editing     | dh/custom        |      | X        |
| F12              | dh/open-sys-file-manager       | opens the Windows explorer in the directory of the current buffer and selects the buffer file           | OS:Windows  | dh/custom        |      | X        |
| S-F1             | dh/open-my-init-file           | opens my init-file in a new buffer                                                                      | Config      | dh/custom        |      | X        |
| M-F1             | dh/open-emacs-idea-file        | opens my file with ideas about future customization                                                     | Config      | dh/custom        |      |          |
| F2               | hydra text-scale               | hydra that allows changing the text-scale                                                               | Windows     | hydra            |      |          |
| t (in Info-mode) | hydra various info manuals     | hydra that opens various info manuals                                                                   | Help        | hydra            |      |          |
| F10              | dh-vergabesnippets-main/body   | complex hydra to easily access my snippets                                                              | Snippets    | hydra            |      |          |
| S-F11            | dh-hydra-modes/body            | hydra to switch between frequently used major/minor modes                                               | Config      | hydra            |      |          |
| M-s              | avi-goto-char-1                | select a char & provide an easy jump to it                                                              | Motion      | ace-window       |      |          |
| F11              | hydra                          | dh-hydra-markdown-mode/body                                                                             | Editing     | hydra            |      |          |
| S-F12            | dh/open-my-current-taskfile    | opens my current-tasks.org at work                                                                      | Files       | dh/custom        |      |          |
| C-F12            | xah-make-backup                | make a backup of the current file or in dired selected files                                            | Files       | dh/custom        |      |          |
| F8               | neotree-project-dir            | opens neotree                                                                                           | Files       | neotree          |      |          |
| C-t              | shell-pop                      | opens a shell inside emacs (Win: eshell, Linux: bash)                                                   | Tools       | shell-pop        |      |          |
|                  |                                |                                                                                                         |             |                  |      |          |
|------------------+--------------------------------+---------------------------------------------------------------------------------------------------------+-------------+------------------+------+----------|





* Practical VIM
Here are useful practises and shortcuts to use some of Vim useful motions and techniques.

- [[http://vimdoc.sourceforge.net/htmldoc/][Vim documentation]]
- [[http://openvim.com/][Interactive Vim tutorial]]
- [[https://devhints.io/vim][Nice Vim cheatsheet]] (html)
- [[https://vim.rtorr.com/][Another Vim cheatsheet]] (html)
 

** Repeatable Actions and How to reverse them

Source: Tip 4

| *Intent*                         | *Act*                   | *Repeat* | *Reverse* |
|----------------------------------+-------------------------+----------+-----------|
| Make a change                    | ~{edit}~                | ~.~      | ~u~       |
| Scan line for next character     | ~f{char}/t{char}~       | ~;~      | ~,~       |
| Scan line for previous character | ~F{char}/T{char}~       | ~;~      | ~,~       |
| Scan document for next match     | ~/pattern<CR>~          | ~n~      | ~N~       |
| Scan document for previous match | ~?pattern<CR>~          | ~n~      | ~N~       |
| Perform substitution             | ~:s/target/replacement~ | ~&~      | ~u~       |
| Execute a sequence of changes    | ~qx{changes}q~          | ~@x~     | ~u~       |

/When facing a repetitive task, we can achieve an optimal editing strategy by making/
/both the motion and the change repeatable. Vim has a knack for this. It remembers our/
/actions and keeps the most common ones within close reach so that we can easily replay them./

** Useful motions

Because I mainly write content for it outside of Emacs on other devices the following
section is in Markdown instead of Org.

#+begin_src markdown :file practical-vim-for-my-emacs.pdf
  # Practise VIM

  | shortcut | explanation                   |
  | :--      | :--                           |
  | `.`      | repeats last command          |
  | `;`      | repeats last search, e.g. `f` |
  | `*`      |                               |
  |          |                               |
  |          |                               |
  |          |                               |
  |          |                               |

  Tabelle 1, Tip 4 einfÃ¼gen

  - make tasks repeatable (`.` & `;`)
#+end_src

#+RESULTS:
file:practical-vim-for-my-emacs.pdf

* Initial settings

Here, I do set some very general settings for my GNU/Emacs.

** profiling:
#+BEGIN_SRC emacs-lisp
  (defvar my-config-el-start-time (current-time) "Time when config.el was started")
  ;(profiler-start 'cpu);; test startup performance - create report with M-x profiler-report
#+END_SRC

** Debugging on
Turn on debugging, it will be turned off at the end. In case something happens
during loading that breaks something, it's nice to have a debug information.

#+BEGIN_SRC emacs-lisp
(setq debug-on-error t)
#+END_SRC
** custom startup message
#+begin_src emacs-lisp
(message "[dh] Running Emacs %s" (emacs-version))
(message "[dh] Loading %s - %s on %s" (expand-file-name "config.org" user-emacs-directory) (system-name) (getenv "OS"))
(message "[dh] User: %s" (user-login-name))
(message "[dh] Emacs_Dir: %s" (getenv "emacs_dir"))
#+end_src

** Always loading newer files
Don't use outdated compiled files. Load the .el-file if it's newer.

#+BEGIN_SRC emacs-lisp
(setq load-prefer-newer t)
#+END_SRC
** Setting & creating dh/emacs-local-dir and setting dh/user-dir and checking if portable :emacs_local_dir:
+ dh/emacs-local-dir is a directory that contains local emacs directories of files, e.g. elpa, recentf, saveplace.
+ dh/user-dir contains the path to the user directory corresponding to the operating system, can't use "~" because that
  is not always correct if I use emacs as a portable version under Windows where I set it differently. On Linux & Mac "~"
  would be okay.

Variable user-emacs-directory contains the path to the .emacs.d directory

I use Emacs only portable on Windows. The easiest way to run it portable to
change the HOME environment variable to directory where emacs and all the other
stuff is located. So in that directory Emacs will also look at if it searches
for "~/.emacs.d". The caveat is that the "~" won't work as expected on Windows.

I will also set DH_EMACS_PORTABLE_DIR to that directory. If that environment
variable is set than I assume that I want to run emacs only in a portable way.
In that case dh/emacs-local-dir should point to that directory, because the elpa
and other files (recentf, savespace) should point to there as well.

#+begin_src emacs-lisp
  ;; check OS type
  (cond
   ((string-equal system-type "windows-nt") ; Microsoft Windows
    (progn
      (when (getenv "DH_EMACS_PORTABLE_DIR")
        (defconst dh/emacs-local-dir (expand-file-name "emacs-local" (getenv "DH_EMACS_PORTABLE_DIR")) "contains the path to my portable emacs files and directories")
        (defconst dh/emacs-is-portable t "boolean switch that reflects if emacs is used as a portable version" )
        (defconst dh/emacs-portable-dir (expand-file-name (getenv "DH_EMACS_PORTABLE_DIR")) "contains the path where the portable version is located if Emacs is used as a portable version" ))
      (unless (getenv "DH_EMACS_PORTABLE_DIR")
        (defconst dh/emacs-local-dir (expand-file-name "emacs-local" (getenv "USERPROFILE")) "contains the path to my device specific emacs files and directories")) 

      (defconst dh/user-dir (expand-file-name (getenv "USERPROFILE")) "contains the path to my real operating system user directory")
     ))
   ;((string-equal system-type "darwin") ; Mac OS X
   ; (progn
   ;   (message "Mac OS X")
   ; ))
   ((string-equal system-type "gnu/linux") ; linux
    (progn
      (defconst dh/emacs-local-dir (expand-file-name ".emacs-local" (getenv "HOME")) "contains the path to my device specific emacs files and directories")
      (defconst dh/user-dir (expand-file-name (getenv "HOME")) "contains the path to my real operating system user directory")
    ))
  )

  ;; create dh/emacs-local-dir directory if it doesn't exist
  (unless (file-directory-p dh/emacs-local-dir)
    (make-directory dh/emacs-local-dir)
  )
#+end_src

** Figuring out, if I am at work 	    :location_switch:
#+BEGIN_SRC emacs-lisp
     ;; setting me-at-work to true if I am at work
     ;;  I can check for it later to enable/disable config parts
     ;; when (or 
     ;;       (string= system-name "PC-1316")

  (if (and
       ;; string equal that checks for Windows is necessary otherwise
       ;; otherwise getenv would return NIL on Linux and downcase would
       ;; throw an error
       (string-equal system-type "windows-nt")
       (string= (downcase (getenv "USERNAME")) "hannasked"))

      (progn				; true = at work
        (message "[dh] Setting const dahan/me-at-work to true")
        (defconst dh/me-at-work t "boolean switch for work environment")

        (defconst dh/emacs-work-extra-dir
          (expand-file-name "emacs-work-extra" "I:\\DATEN\\_Daniel\\Emacs")
          "directory where I keep work related emacs files, e.g. pandoc templates")
        ;; create dh/emacs-local-dir directory if it doesn't exist

        (unless (file-directory-p dh/emacs-work-extra-dir)
          (make-directory dh/emacs-work-extra-dir))
        ;; directly setting proxy - otherwise url-package couldn't work

        (setq url-proxy-services
              '(("no_proxy" . "^\\(localhost\\|10.*\\)")
                ("http" . "192.168.179.77:8080")
                ("https" . "192.168.179.77:8080"))))
    (progn				; false = not at work
      (message "[dh] Setting const dahan/not-at-work to true")
      (defconst dh/not-at-work t "boolean switch for not at work packages")))
#+END_SRC
** setting dh/dropbox-dir, dh/onedrive-dir & dh/iclouddrive-dir

#+begin_src emacs-lisp
  (when (boundp 'dh/not-at-work)

    ;; setting path to Dropbox depending on user directory if it exists
    (when (file-directory-p (expand-file-name "Dropbox" dh/user-dir))
      (defconst dh/dropbox-dir (expand-file-name "Dropbox" dh/user-dir) "contains the path to my dropbox")

      ;; I have two Dropbox setups, one full with all folders and one with only two
      ;; figuring out which is available
      (cond
       ((and
         (file-directory-p (expand-file-name "dahan_text" dh/dropbox-dir))
         (file-directory-p (expand-file-name "dahan_ebooks" dh/dropbox-dir))
         (file-directory-p (expand-file-name "dahan_documents" dh/dropbox-dir))
         (file-directory-p (expand-file-name "dahan_notebooks" dh/dropbox-dir)))
        (defconst dh/dropbox-full-available t "boolean switch that shows if my full dropbox is available"))
       ((and
         (file-directory-p (expand-file-name "org" dh/dropbox-dir))
         (file-directory-p (expand-file-name "dahan_uberspace" dh/dropbox-dir)))
        (defconst dh/dropbox-partial-available t "boolean switch that shows if only my partial dropbox is available"))))

    ;; setting path to Onedrive depending on user directory if it exists
    (if (file-directory-p (expand-file-name "OneDrive" dh/user-dir))
        (defconst dh/onedrive-dir (expand-file-name "OneDrive" dh/user-dir) "contains the path to my dropbox"))

    ;; setting path to iClouddrive dir if it exists
    (when (file-directory-p (expand-file-name "iCloudDrive" dh/user-dir))
      (defconst dh/iclouddrive-dir (expand-file-name "iCloudDrive" dh/user-dir) "contains the path to my iCloud drive")
      ;; checking if beorg dir exists
      (if (file-directory-p (expand-file-name "iCloud~com~appsonthemove~beorg/org" dh/iclouddrive-dir))
          ;; setting path to it
          (defconst dh/beorg-dir (expand-file-name "iCloud~com~appsonthemove~beorg/org" dh/iclouddrive-dir) "contains the path to my beorg directory"))))
#+end_src

** DISABLED set start of week to Monday (not sunday) http://sunsite.univie.ac.at/textbooks/emacs/emacs_33.html
#+BEGIN_SRC emacs-lisp
(setq calendar-week-start-day 1)
#+END_SRC

** DISABLED omit usage of TAB for =C-x r o=: indent-tabs-mode
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode t)
#+END_SRC

** DISABLED append and update time-stamps for =Time-stamp: <>= in headers:
#+BEGIN_SRC emacs-lisp
(add-hook 'write-file-hooks 'time-stamp)
#+END_SRC

** set warning of opening large files to 100MB
#+BEGIN_SRC emacs-lisp
(setq large-file-warning-threshold 100000000)
#+END_SRC

** DISABLED do not add double space after periods [[http://www.reddit.com/r/emacs/comments/2l5gtz/real_sentence_in_emacs/][Real sentence in Emacs : emacs]]
#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC

** inhibit the startup screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC

** English time-stamps in Org-mode (instead of localized German ones):
- http://lists.gnu.org/archive/html/emacs-orgmode/2011-10/msg01046.html
- Â«system locale to use for formatting time values (e.g., timestamps in Org mode files)Â»
- "en_US.utf8" did not work for the weekday in the agenda!
#+BEGIN_SRC emacs-lisp
(setq system-time-locale "C")
#+END_SRC

** setting up UTF-8
#+BEGIN_SRC emacs-lisp
  ;; utf-8
  (prefer-coding-system 'utf-8)
  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
#+END_SRC
** Change yes or no to y or n
Lazy people like me never want to type "yes" when "y" will suffice.

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** ignored file extensions for completions
#+begin_src emacs-lisp
(push ".out" completion-ignored-extensions)
(push ".pdf" completion-ignored-extensions)
(push ".synctex.gz" completion-ignored-extensions)
#+end_src


* Package and Use-Package configuration			    :emacs_local_dir:

Configure the package manager of my GNU/Emacs.

http://www.reddit.com/r/emacs/comments/2u1bml/gnu_or_melpa_version_of_yasnippet_both_in_mx/

MELPA packages are usually built automatically from a project's
repository; the GNU repository has stable releases that are explicitly
submitted to it.

=package-user-dir= holds the directory where Emacs package manager
installs its local copies of the packages:

#+BEGIN_SRC emacs-lisp
(setq package-user-dir (expand-file-name "elpa" dh/emacs-local-dir))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(require 'package) ;; You might already have this line

;; adding my lisp directory to the load-path
;; (add-to-list 'load-path "~/.emacs.d/lisp/")
(if (file-directory-p (expand-file-name "package-dev" user-emacs-directory))
  (add-to-list 'load-path (expand-file-name "package-dev" user-emacs-directory))
)




;; adding the subdirectories of ~./.emacs.d/lisp/manually_installed_packages to the load-path
;;(let ((default-directory "~/.emacs.d/lisp/manually_installed_packages/"))
;;  (normal-top-level-add-subdirs-to-load-path))
(if (file-directory-p (expand-file-name "local-packages" user-emacs-directory))
  (progn       ;; true
     (let ((default-directory (expand-file-name "local-packages" user-emacs-directory)))
       (normal-top-level-add-subdirs-to-load-path)
     )
  )
)



(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (url (concat (if no-ssl "http" "https") "://melpa.org/packages/")))
       (add-to-list 'package-archives (cons "melpa" url) t) 
)
;(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
(package-initialize)

;; (add-to-list 'load-path "~/elisp")
(unless (package-installed-p 'use-package)
	(package-refresh-contents)
  	(package-install 'use-package))
(setq use-package-verbose t)
(setq use-package-always-ensure t) ;; install packages if not installed
(setq use-package-always-defer t)  ;; defer packages if not :demand
(require 'use-package)

(eval-when-compile
  (require 'use-package))
(use-package delight)

(use-package use-package)
 
(use-package auto-compile
  :config
  (auto-compile-on-load-mode)
  (auto-compile-on-save-mode)
  (setq auto-compile-display-buffer nil))

(setq load-prefer-newer t)
#+END_SRC


* dh/functions & custom bindings - various elisp functions
** own functions
*** DISABLED dh/byte-recompile
#+BEGIN_SRC emacs-lisp
;; Byte-compile my init files to speed things up next time
(defun dh/byte-recompile ()
  (interactive)
  (byte-recompile-directory "~/.emacs.d" 0)
)
#+END_SRC
*** dh/upgrade-packages
#+BEGIN_SRC emacs-lisp
;; automate the package upgrade process
(defun dh/upgrade-packages ()
  (pop-to-buffer "*scratch*")
  (interactive)
  (package-menu-mode)
  (package-menu-refresh)
  (package-menu-mark-upgrades)
  (package-menu-executes)
)
#+END_SRC
*** dh/insert-line-before
#+BEGIN_SRC emacs-lisp
(defun dh/insert-line-before (times)
  "Insert a newline or multiple newlines above the line containing the cursor"
  (interactive "p")
  (save-excursion       ;store position
     (move-beginning-of-line 1)
     (newline times)
  )
)

(global-set-key (kbd "C-S-o")
                 'dh/insert-line-before)
#+END_SRC
*** dh/visit-favourite-directories
Based on the following article: http://endlessparentheses.com/visit-directory-inside-a-set-of-directories.html
#+begin_src emacs-lisp
(defcustom dh/favourite-directories 

  '( "C:/Users/Bine/Dropbox/portable_apps/portable_emacs/.emacs.d/"
      "C:/Users/Bine/Dropbox/dahan_text/!notes/"
      "C:/Users/Bine/Dropbox/dahan_text/"
      "C:/Users/Bine/Dropbox/dahan_documents/"
      "C:/Users/Bine/Dropbox/dahan_misc/"
      "C:/Users/Bine/Dropbox/dahan_x_archiv/")
  "List of favourite directories.
Used in `dh/visit-favourite-dir'. The order here 
affects the order that completions will be offered."
  :type '(repeat directory)
  :group 'dh)

;; default is for dh/me-at-home-win
(if (boundp 'dh/me-at-work)
    (setq dh/favourite-directories '("I:/DATEN/BESCHAFF/2015/Beschaffungen_Daniel_in_Arbeit/"
				     "I:/DATEN/_Daniel/!ORG/"
				     "I:/DATEN/_Daniel/"
				     "I:/DATEN/BESCHAFF/2015/Beschaffungen_Daniel_in_Vibe_hochgeladen/"
				     "H:/Privat/"
				     )))


(defun dh/visit-favourite-dir (files-too)
  "Offer all directories inside a set of directories.
Compile a list of all directories inside each element of
`dh/favourite-directories', and visit one of them with
`ido-completing-read'.
With prefix argument FILES-TOO also offer to find files."
  (interactive "P")
  (let ((completions
         (mapcar #'abbreviate-file-name
           (cl-remove-if-not
            (if files-too #'file-readable-p
              #'file-directory-p)
            (apply #'append
              (mapcar (lambda (x)
                        (directory-files
                         (expand-file-name x)
                         t "^[^\.].*" t))
                dh/favourite-directories))))))
    (dired
     (ido-completing-read "Open directory: "
                          completions 'ignored nil ""))))

;; Note that C-x d is usually bound to dired. I find
;; this redundant with C-x C-f, so I don't mind
;; overriding it, but you should know before you do.
(define-key ctl-x-map "d" #'dh/visit-favourite-dir)
#+end_src
*** dh/open-sys-file-manager			       :bind:bind_documented:
based on http://arunrocks.com/emacs-tip-a-key-to-open-the-current-folder-in-windows/
         http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html
#+BEGIN_SRC emacs-lisp
     ;; open-sys-file-manager
     ;; ----------
     (defun dh/open-sys-file-manager ()
       "Show current file in desktop.
      (Mac Finder, Windows Explorer, Linux file manager)
      This command can be called when in a file or in `dired'.

     URL `http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html'
     Version 2018-01-13"
       (interactive)
       (let (($path (if (buffer-file-name) (buffer-file-name) default-directory)))
         (cond
          ((string-equal system-type "windows-nt")
           ;; somehow that doesn't work
           ;; (w32-shell-execute "explore" $path "/e,/select,"
           ;; 		   ;; 		   ;; (replace-regexp-in-string "/" "\\" $path t t)
           ;; 		   ;; 		   )

           (let ((w32file (subst-char-in-string ?/ ?\\ (expand-file-name $path))))
             (if (file-directory-p w32file)
                 (w32-shell-execute "explore" w32file "/e,/select,")
               (w32-shell-execute "open" "explorer" (concat "/e,/select," w32file)))))

           ((string-equal system-type "darwin")
            (if (eq major-mode 'dired-mode)
                (let (($files (dired-get-marked-files)))
                  (if (eq (length $files) 0)
                      (shell-command
                       (concat "open " (shell-quote-argument default-directory)))
                    (shell-command
                     (concat "open -R " (shell-quote-argument (car (dired-get-marked-files)))))))
              (shell-command
               (concat "open -R " $path))))
           ((string-equal system-type "gnu/linux")
            (let (
                  (process-connection-type nil)
                  (openFileProgram (if (file-exists-p "/usr/bin/gvfs-open")
                                       "/usr/bin/gvfs-open"
                                     "/usr/bin/xdg-open")))
              (start-process "" nil openFileProgram $path)))
           ;; (shell-command "xdg-open .") ;; 2013-02-10 this sometimes froze emacs till the folder is closed. eg with nautilus
           )))

     ;; ELISP> (file-name-nondirectory (directory-file-name (file-name-directory "d:/portable-emacs-win64/.emacs.d/config.org")))
     ;; returns ".emacs.d"

     (global-set-key [f12]         'dh/open-sys-file-manager)        ; F12 - Open Explorer for the current file path)

#+END_SRC

*** dh/open-file-in-emacs
#+begin_src emacs-lisp
  (defun dh/open-file-in-emacs (file)
    "opens a file in a new buffer in Emacs.

    Simple function that checks if a file exists
    and opens it in Emacs via find-file."
    (interactive)
    (if (file-exists-p file)
        (progn
          (find-file file)		; true
          )
      (message "Error: Couldn't find %S" file)))

  ;; various keybindings to open commonly used files
  (global-set-key (kbd "S-<f1>")
                  (lambda () (interactive)
                    (dh/open-file-in-emacs (expand-file-name "config.org" user-emacs-directory))))

  (global-set-key (kbd "M-<f1>")
                    (lambda () (interactive)
                      (dh/open-file-in-emacs (expand-file-name "elisp-playground.org" user-emacs-directory))))

  (global-set-key (kbd "S-<f12>")
                    (lambda () (interactive)
                      (dh/open-file-in-emacs org-default-notes-file)))
		  

#+end_src
*** dh/format-as-euro
Warning works so far, but not if a 5 is at the last part.

ELISP> (dh/format-as-euro 123456789.995)
"123.456.789,99 â¬"
ELISP> (dh/format-as-euro 123456789.996)
"123.456.790,00 â¬"
ELISP> (dh/format-as-euro 123456789.996)
"123.456.790,00 â¬"

ELISP> (dh/format-as-euro 123456789.125)
"123.456.789,12 â¬"
ELISP> (dh/format-as-euro 123456789.126)
"123.456.789,12 â¬"
ELISP> (dh/format-as-euro 123456789.126)
"123.456.789,13 â¬"

#+begin_src emacs-lisp
  (defun dh/format-as-euro (num)
    "Format NUM as string grouped with . and add â¬ at the end."
    ;; Based on code for `math-group-float' in calc-ext.el
    ;; see also https://www.emacswiki.org/emacs/ElispCookbook
    (let* ((size 3) ; grouping every 3 numbers
           (char ".")        ; char to group with
           (str              ; constructing str with the floating number
            ;; replacing . with , to get a German floating point
            (replace-regexp-in-string "\\." ","
                                      ;; two numbers as fractional part
                                      (format "%0.2f"
                                              (* 0.01
                                                 (round (* 100
                                                           (cond
                                                            ((stringp num) ; convert to a number if it's a string
                                                             (string-to-number num))
                                                            ((numberp num) ; else return number
                                                             num)
                                                            (t
                                                             0 ; default value is 0 if it isn't a string or number
                                                             ))))))
                                      ;; (if (stringp num)
                                      ;;     num
                                      ;;   (number-to-string num))
                                      ))
           ;; omitting any trailing non-digit chars, that means
           ;; grouping only numbers before the dot
           (pt (or (string-match "[^0-9]" str) (length str))))
      ;; replacing . with ,
      ;; (setq str (replace-regexp-in-string "\." "," str))
      (while (> pt size)
        (setq str (concat (substring str 0 (- pt size))
                          char
                          (substring str (- pt size)))
              pt (- pt size)))
      ;; add EURO sign at the end
      (setq str (concat str " â¬"))
      str))
#+end_src
*** dh/get-folder-name-for-buffer-file
That's a custom function designed to be used in my snippets. In those I use 
snippet templates and I would like to prefill custom values depending on parts
of the directory name.

file: ~example.txt~ 
is in directory: ~D:\bla\blup\2018\I 1.5-2018-D048 Important but not described stuff~

In that case the latest directory name should be extracted to:
~I 1.5-2018-D048 Important but not described stuff~

And from that I would need to split it into two parts:

1st part: ~I 1.5-2018-D048~
2nd part: ~Important but not described stuff~

This function should be a helper function that returns a list of both parts. It will
be used by two other functions to get the first part and the second part with car and
con.
#+begin_src emacs-lisp
  (defun dh/get-folder-name-for-buffer-file ()
    "Splits the directory name of the directory that contains the buffer-file-name.

  If there is no buffer-file-name than it will use the default directory instead."
    (interactive)
    (if (buffer-file-name)
        (file-name-nondirectory (directory-file-name (file-name-directory buffer-file-name)))
      (default-directory)))
#+end_src
*** dh/get-contract-number
- a simple custom function to get the contract number of the name of the working directory
- it's used in snippets to fill in some useful information based on the directory where the file is located
#+begin_src emacs-lisp
  (defun dh/get-contract-number ()
    (interactive)
    (let (($dirname))
      (setq $dirname (dh/get-folder-name-for-buffer-file))
      (if (string-match "\\(I 1.5[-A-Za-z0-9]+\\) \\(.+\\)" $dirname)
          (match-string 1 $dirname)
        ;; else
        ($dirname))))
#+end_src

** dh/get-contract-topic
- a simple custom function to get the contract topic of the name of the working directory
- it's used in snippets to fill in some useful information based on the directory where the file is located
#+begin_src emacs-lisp
  (defun dh/get-contract-topic ()
    (interactive)
    (let (($dirname))
      (setq $dirname (dh/get-folder-name-for-buffer-file))
      (if (string-match "\\(I 1.5[-A-Za-z0-9]+\\) \\(.+\\)" $dirname)
          (match-string 2 $dirname)
        ;; else
        ($dirname))))
#+end_src

*** dh/convert-markdown
A wrapper function that uses ivy to convert markdown files to various output formats.

#+begin_src emacs-lisp
  (defun dh/convert-markdown ()
    "converts the current buffer from markdown to various output formats."
    (interactive)
    ;; do only something if you are in markdown-mode, otherwise do nothing
    (when (string-equal major-mode "markdown-mode")
      (let ((dh-command-markdown "multimarkdown")
            (dh-command-pandoc "pandoc")
            (dh-command-list ("mmd >> html"
                              "pandoc >> html"
                              "pandoc >> org"
                              "pandoc >> pdf (scrlttr2 with lualatex)"
                              "pandoc >> pdf (scrlttr2 with xelatex)"
                              "pandoc >> pdf (scrlttr2)"
                              "pandoc >> docx"
                              "pandoc >> docx (reference file)"
                              )))
        )
      ))
#+end_src
** copied functions
*** join lines					       :bind:bind_documented:
#+begin_src emacs-lisp :tangle yes
;; joins the following line onto this one
;; With point anywhere on the first line, I simply press M-j multiple times to pull the lines up. 
(global-set-key (kbd "M-j")
            (lambda ()
                  (interactive)
                  (join-line -1)))
#+end_src
*** xah-make-backup-and-save
#+begin_src emacs-lisp
  (defun xah-make-backup ()
    "Make a backup copy of current file or dired marked files.
  If in dired, backup current file or marked files.
  The backup file name is
   â¹nameâº~â¹timestampâº~
  example:
   file.html~20150721T014457~
  in the same dir. If such a file already exist, it's overwritten.
  If the current buffer is not associated with a file, nothing's done.
  URL `http://ergoemacs.org/emacs/elisp_make-backup.html'
  Version 2015-10-14"
    (interactive)
    (let (($fname (buffer-file-name)))
      (if $fname
          (let (($backup-name
                 (concat $fname "~" (format-time-string "%Y%m%dT%H%M%S") "~")))
            (copy-file $fname $backup-name t)
            (message (concat "Backup saved at: " $backup-name)))
        (if (string-equal major-mode "dired-mode")
            (progn
              (mapc (lambda ($x)
                      (let (($backup-name
                             (concat $x "~" (format-time-string "%Y%m%dT%H%M%S") "~")))
                        (copy-file $x $backup-name t)))
                    (dired-get-marked-files))
              (message "marked files backed up"))
          (user-error "buffer not file nor dired")))))

  (defun xah-make-backup-and-save ()
    "backup of current file and save, or backup dired marked files.
  For detail, see `xah-make-backup'.
  If the current buffer is not associated with a file, nothing's done.
  URL `http://ergoemacs.org/emacs/elisp_make-backup.html'
  Version 2015-10-14"
    (interactive)
    (if (buffer-file-name)
        (progn
          (xah-make-backup)
          (when (buffer-modified-p)
            (save-buffer)))
      (progn
        (xah-make-backup))))
#+end_src

*** kill backwards
Killing backwards to begin of line with respecting the current indentation level.
http://emacsredux.com/blog/2013/04/08/kill-line-backward/

Bound to ~C-Backspace~.

Usually is backward-word-kill bound to both ~C-Backspace~ and ~M-Backspace~.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-<backspace>") (lambda ()
                                          (interactive)
                                          (kill-line 0)
                                          (indent-according-to-mode)))
#+end_src

* General Appearance
** full screen, global-font-lock and no startup-message
#+BEGIN_SRC emacs-lisp
  ;;;;;
  ;; general appearance
  ;;;;;

  ;;; disabling the Emacs Welcome screen
  (setq inhibit-startup-message t)

  ;; turn on syntax highlighting everywhere
  (global-font-lock-mode t)

  ;; start in full screen
  ;; Start maximised (cross-platf)
  (add-hook 'window-setup-hook 'toggle-frame-maximized t)
#+END_SRC

** cursor with adaptive width
[[http://pragmaticemacs.com/emacs/adaptive-cursor-width/][Adaptive cursor width | Pragmatic Emacs]]: make cursor the width of the
character it is under; i.e. full width of a TAB:
#+BEGIN_SRC emacs-lisp
(setq x-stretch-cursor t)
#+END_SRC

** smart-mode-line - initial settings
#+BEGIN_SRC emacs-lisp
  ;; smart-mode-line
  ;; setting the mode-line
  (use-package smart-mode-line-powerline-theme)
  (use-package smart-mode-line
    :init
    (progn
      (setq powerline-arrow-shape 'curve
            powerline-default-separator-dir '(right . left)
            sml/theme 'powerline
            ;; sml/shorten-modes t
            sml/name-width 40
            sml/mode-width 'full
            column-number-mode t)
      (sml/setup)))
#+END_SRC

** smart-mode-line - regexp
#+begin_src emacs-lisp
  ;(setq sml/replacer-regexp-list (list)) ; start with an empty list
  ; adding regexp for shortening Dropbox to DB and special DH_Folders in DB
  (when (boundp 'dh/dropbox-dir)
    (add-to-list 'sml/replacer-regexp-list
                 `(,(concat "^" dh/dropbox-dir "/") ,":DB:") t)
    (add-to-list 'sml/replacer-regexp-list '("^:DB:dahan_text" ":DB-TEXT:") t)
    (add-to-list 'sml/replacer-regexp-list '("^:DB:dahan_latex" ":DB-LATEX:") t)
    (add-to-list 'sml/replacer-regexp-list '("^:DB:dahan_letters" ":DB-LETTERS:") t)
    (add-to-list 'sml/replacer-regexp-list '("^:DB:dahan_misc" ":DB-MISC:") t)
    (add-to-list 'sml/replacer-regexp-list '("^:DB:dahan_documents" ":DB-DOCUMENTS:") t)
    (add-to-list 'sml/replacer-regexp-list '("^:DB:dahan_ulysses" ":DB-ULYSSES:") t)
    (add-to-list 'sml/replacer-regexp-list '("^:DB:dahan_x_archiv" ":DB-ARCHIV:") t)
    (add-to-list 'sml/replacer-regexp-list '("^:DB:org" ":DB:ORG:") t)
    (add-to-list 'sml/replacer-regexp-list '("^:DB:dahan_uberspace" ":DB-UBERSPACE:") t)
    (add-to-list 'sml/replacer-regexp-list '("^:DB:dahan_notebooks" ":DB-NOTEBOOKS:") t))

  ;; adding regexp for shortening OneDrive to OD
  (when (boundp 'dh/onedrive-dir)
    (add-to-list 'sml/replacer-regexp-list
                 `(,(concat "^" dh/onedrive-dir "/") ,":OD:") t)
    (add-to-list 'sml/replacer-regexp-list '("^:OD:dprogramming" ":OD-PROGRAMMING:") t))

  ;; adding regexp for shortening iCloudDrive to iCloud
  (when (boundp 'dh/iclouddrive-dir)
    (add-to-list 'sml/replacer-regexp-list
                 `(,(concat "^" dh/iclouddrive-dir "/") ,":iCloud:") t)
    (add-to-list 'sml/replacer-regexp-list '("^:iCloud:M6HJR9W95L~com~textasticapp~textastic" ":iCloud-Textastic:") t)
    (add-to-list 'sml/replacer-regexp-list '("^:iCloud:iCloud~com~appsonthemove~beorg/org/" ":iCloud-beorg:") t)
    (add-to-list 'sml/replacer-regexp-list '("^:iCloud:27N4MQEA55~pro~writer" ":iCloud-iAWriter:") t))


  ;; shortening Windows USERPROFILE to WIN~
  (cond
   ((string-equal system-type "windows-nt") ; Microsoft Windows
    (add-to-list 'sml/replacer-regexp-list
                 `(,(concat "^" dh/user-dir "/") ,":WIN~:") t)))

  (when (boundp 'dh/me-at-work)
    ;; order does matter, a few abbrevations are stacked
    (add-to-list 'sml/replacer-regexp-list '("^I:/DATEN/_Daniel/" ":I_DANIEL:") t)
    (add-to-list 'sml/replacer-regexp-list '("^:I_DANIEL:misc/portable_emacs/.emacs.d/" ":ED:") t)
    (add-to-list 'sml/replacer-regexp-list '("^:I_DANIEL:misc/snippets-work/" ":WORKSNIPPETS:") t)
    (add-to-list 'sml/replacer-regexp-list '("^:I_DANIEL:!ORG/" ":ORG:") t)
    (add-to-list 'sml/replacer-regexp-list '("^I:/DATEN/BESCHAFF/" ":BESCHAFF:") t)
    (add-to-list 'sml/replacer-regexp-list '("^:BESCHAFF:Beschaffungen_Daniel_in_Arbeit" ":B_INARBEIT:") t)
    (add-to-list 'sml/replacer-regexp-list '("^:BESCHAFF:Beschaffungen_Daniel_in_Vibe_hochgeladen" ":B_VIBE:") t)
    (add-to-list 'sml/replacer-regexp-list '("^H:/Privat/" ":H_PRIVAT:") t)
    (add-to-list 'sml/replacer-regexp-list '("^L:/!_Z22/DOKU/" ":L_DOKU:") t))
#+end_src
** settings for windowing system
*** DISABLED Theme Monokai
#+BEGIN_SRC emacs-lisp
  (use-package monokai-theme
    :init (load-theme 'monokai t))
#+END_SRC
*** Theme Dracula
#+BEGIN_SRC emacs-lisp
  (use-package dracula-theme
    :init (load-theme 'dracula t))
#+END_SRC
*** fonts & faces
more here http://ergoemacs.org/emacs/emacs_list_and_set_font.html

To find out which font-face is used for a certain char you must launch
~what-cursor-position~ with a prefix argument: ~C-u C-x =~ or you could
also use ~M-x describe-char~.

Usually, faces inherit so I must also set other font-faces as well, e.g.
Markdown-mode iherits from  ~fixed-pitch~ face for ~Markdown Code Face~.
And on my Windows it's standard is courier. :-(

You can see a list of all loaded faces and it's highlighting with:
 ~M-x list-faces-display~

A great article about the emacs font system and setting fallback fonts can
be found here: https://idiocy.org/emacs-fonts-and-fontsets.html

#+BEGIN_SRC emacs-lisp
  ;; setting fonts, the first find will be choosen
  (cond
   ((find-font (font-spec :name "IBM Plex Mono"))
    (set-frame-font "IBM Plex Mono-13")
    (set-face-attribute 'fixed-pitch nil :font "IBM Plex Mono")
    (set-face-attribute 'fixed-pitch-serif nil :font "IBM Plex Mono"))
   ((find-font (font-spec :name "Consolas"))
    (set-frame-font "Consolas-13")
    (set-face-attribute 'fixed-pitch nil :font "Consolas")
    (set-face-attribute 'fixed-pitch-serif nil :font "Consolas")))

  ;; setting additional font for text and markdown
  ;; (cond ((find-font (font-spec :name "Pigeonette V01")) (set-face-attribute 'Markdown-)))

  ;; (cond
  ;;  ((member "Real Text Pro" (font-family-list))
  ;;   (set-face-attribute 'default nil :font "Real Text Pro")
  ;;    ; can't set font size in that way, need a way to set the font bigger)
  ;;  ((member "IBM Plex Mono" (font-family-list))
  ;;   (set-face-attribute 'default nil :font "IBM Plex Mono")))
#+END_SRC
*** frame title of Emacs
#+begin_src emacs-lisp
  ;; setting the frame title
  (if (boundp 'dh/me-at-work)
      (defconst dh/location-for-frame-title (concat "@WORK (" (getenv "emacs_dir") ")") "contains the wording if I am at work or not for the frame-title") ; true
    (defconst dh/location-for-frame-title (concat "@NOT AT WORK") "contains the wording if I am at work or not for the frame-title") ; false
    )

  (setq frame-title-format
        '("%b  -  "
          (:eval (if (buffer-file-name)
                     (abbreviate-file-name (buffer-file-name))
                   "%b")) "     Emacs " emacs-version dh/location-for-frame-title))
#+end_src

*** hide the tool-bar
#+begin_src emacs-lisp
  (tool-bar-mode -1)
#+end_src

** terminal specific settings
*** DISABLED hide the menu bar
based on: https://emacs.stackexchange.com/a/29443

It must be done on frame level if you run frames in tty and gui on emacs-server.
#+begin_src emacs-lisp
(defun contextual-menubar (&optional frame)
  "Display the menubar in FRAME (default: selected frame) if on a
    graphical display, but hide it if in terminal."
  (interactive)
  (set-frame-parameter frame 'menu-bar-lines 
                             (if (display-graphic-p frame)
                                  1 0)))

(add-hook 'after-make-frame-functions 'contextual-menubar)
#+end_src
*** hide menu bar
#+begin_src emacs-lisp
  (unless (display-graphic-p)
   (menu-bar-mode -1))
#+end_src

*** dimmer
package that dims the faces of not active windows dynamically
#+begin_src emacs-lisp
  (use-package dimmer
    :init
    (dimmer-activate)
    (setq dimmer-percent 0.3) ; default is 0.20 
    )
#+end_src

* General settings & packages
** some ignored file extensions for completions
#+begin_src emacs-lisp
  (push ".out" completion-ignored-extensions)
  (push ".pdf" completion-ignored-extensions)
  (push ".synctex.gz" completion-ignored-extensions)
#+end_src
** ibuffer
making ibuffer as default buffer list

code is from http://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet

#+begin_src emacs-lisp
  (defalias 'list-buffers 'ibuffer) ; make ibuffer default
  (setq ibuffer-saved-filter-groups
        (quote (("not-at-work"
                 ("dired" (mode . dired-mode))
                 ("emacs-config" (or
                                  (filename . ".emacs.d")
                                  (filename . "emacs-config")))
                 ("my tasks" (filename . "/Dropbox/org/"))
                 ("org" (mode . org-mode))
                 ("org-src" (name . "^\\*Org Src"))
                 ("slime" (or
                           (name . "^\\*sl")
                           (name . "^\\*inferior")))
                 ("web" (or
                         (mode . web-mode)
                         (mode . js2-mode)))
                 ("shell" (or
                           (mode . eshell-mode)
                           (mode . shell-mode)))
                 ("mu4e" (name . "\*mu4e\*"))
                 ("programming" (or
                                 (mode . python-mode)
                                 (mode . c++-mode)
                                 (mode . rust-mode)))
                 ("Magit" (name . "\*magit"))
                 ("Help" (or
                          (name . "\*Help\*")
                          (name . "\*Apropos\*")
                          (name . "\*info\*")))
                 ("emacs" (or
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*ielm\\*$")
                           (name . "^\\*Messages\\*$")))))))

  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "not-at-work")))

  ;; don't show these
  ;; (add-to-list 'ibuffer-never-show-predicates "zowie")

  ;; Don't show filter groups if there are no buffers in that group
  (setq ibuffer-show-empty-filter-groups nil)

  ;; Don't ask for confirmation to delete marked buffers
  (setq ibuffer-expert t)
#+end_src
** Recent files						    :emacs_local_dir:
#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :init
    (setq recentf-max-menu-items 200)
    (setq recentf-max-saved-items 50)
    ;; setting a path outside .emacs.d into my emacs-local-dir
    (setq recentf-save-file (expand-file-name ".recentf" dh/emacs-local-dir))
    (recentf-mode 1)
    ;; removing everything inside elpa directory, especially *autoloads.el
    ;; adding it to the list will delete them if I call recentf-cleanup
    ;; to do that I launch it at the end of my config
    (add-to-list 'recentf-exclude
                 (format "%s/elpa/.*" (expand-file-name dh/emacs-local-dir))))  
#+END_SRC
** bookmarks						    :emacs_local_dir:
#+begin_src emacs-lisp
  ;; setting a path outside .emacs.d into my emacs-local-dir
  (setq bookmark-default-file (expand-file-name ".bookmarks" dh/emacs-local-dir))
#+end_src
** saveplace						    :emacs_local_dir:
Navigates back to where you were editing a file next time you open it
#+BEGIN_SRC emacs-lisp
  (use-package saveplace
    :init
    ;; setting a path outside .emacs.d into my emacs-local-dir
    (setq save-place-file (expand-file-name ".places" dh/emacs-local-dir))
    (save-place-mode 1))
#+END_SRC

** smartparens
    
https://github.com/Fuco1/smartparens

#+begin_src emacs-lisp
  (use-package smartparens
    :delight
    :init (smartparens-global-mode t)
    :config
    ;; Activate smartparens in minibuffer
    (add-hook 'eval-expression-minibuffer-setup-hook #'smartparens-mode)
    ;; Do not pair simple quote
    (sp-pair "'" nil :actions :rem)
    ;; add some org text markup pairs
    (sp-local-pair 'org-mode "~" "~")     ; code
    (sp-local-pair 'org-mode "_" "_")     ; underlined
    )
#+end_src
** undo-tree
#+begin_src emacs-lisp
  ;; Undo tree mode - visualize your undos and branches
  (use-package undo-tree
    :delight
    :init
    (progn
      (global-undo-tree-mode)
      (setq undo-tree-visualizer-timestamps t)
      (setq undo-tree-visualizer-diff t)))
#+end_src
** neotree
A pretty cool file tree plugin. I enabled Projectile & VC (version control 
support). To refresh the Neotree buffer type `~` in the buffer.

Here are some more shortcuts for it:

+ ~n~ next line ï¼ ~p~ previous lineã
+ ~SPC~ or ~RET~ or ~TAB~ Open current item if it is a file. Fold/Unfold current item if it is a directory.
+ ~g~ Refresh
+ ~A~ Maximize/Minimize the NeoTree Window
+ ~H~ Toggle display hidden files
+ ~C-c C-n~ Create a file or create a directory if filename ends with a â/â
+ ~C-c C-d~ Delete a file or a directory.
+ ~C-c C-r~ Rename a file or a directory.
+ ~C-c C-c~ Change the root directory.
+ ~C-c C-p~ Copy a file or a directory.

https://github.com/jaypei/emacs-neotree

#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :bind (("<f8>" . neotree-project-dir))
    :init
    (progn
      ;; Every time when the neotree window is opened, it will try to find current
      ;; file and jump to node.
      (setq-default neo-smart-open t)
      ;; Do not allow neotree to be the only open window
      (setq-default neo-dont-be-alone t))
    :config
    (progn
      (setq neo-theme 'nerd)           ; 'classic, 'nerd, 'ascii, 'arrow

      ;;  When running âprojectile-switch-projectâ (C-c p p), âneotreeâ will change root automatically.
      ;; (setq projectile-switch-project-action 'neotree-projectile-action)

      ;; vc-backed for git must be enabled for the following vc integration
      (setq neo-vc-integration '(face char))
      ;; Patch to fix vc integration
      (defun neo-vc-for-node (node)
        (let* ((backend (ignore-errors
                          (vc-backend node)))
               (vc-state (when backend (vc-state node backend))))
          (cons (cdr (assoc vc-state neo-vc-state-char-alist))
                (cl-case vc-state
                  (up-to-date neo-vc-up-to-date-face)
                  (edited neo-vc-edited-face)
                  (needs-update neo-vc-needs-update-face)
                  (needs-merge neo-vc-needs-merge-face)
                  (unlocked-changes neo-vc-unlocked-changes-face)
                  (added neo-vc-added-face)
                  (removed neo-vc-removed-face)
                  (conflict neo-vc-conflict-face)
                  (missing neo-vc-missing-face)
                  (ignored neo-vc-ignored-face)
                  (unregistered neo-vc-unregistered-face)
                  (user neo-vc-user-face)
                  (t neo-vc-default-face))))))
    (defun neotree-project-dir ()
      "Open NeoTree using the git root."
      (interactive)
      (let ((project-dir (projectile-project-root))
            (file-name (buffer-file-name)))
        (neotree-toggle)
        (if project-dir
            (if (neo-global--window-exists-p)
                (progn
                  (neotree-dir project-dir)
                  (neotree-find file-name)))
          (message "Could not find git project root.")))))
#+END_SRC
** ace-window							       :bind:
When there are two windows, ace-window will call other-window. If there are more, each window will have its first character highlighted. Pressing that character will switch to that window. Note that, unlike ace-jump-mode, the point position will not be changed: it's the same behavior as that of other-window. The windows are ordered top-down, left-to-right. This means that if you remember your window layouts, you can switch windows without even looking at the leading char. For instance, the top left window will always be 1.
- You can swap windows by calling ace-window with a prefix argument C-u.
- You can delete the selected window by calling ace-window with a double prefix argument, i.e. C-u C-u.
#+begin_src emacs-lisp
  (use-package ace-window
    :bind ("C-x o" . ace-window))
#+end_src
** ace-link					       :bind:bind_documented:
 jump to a link in an Info-mode or help-mode or org-mode or eww-mode buffer, you can tab through the links to select the one you want. This is an O(N) operation, where the N is the amount of links. This package turns this into an O(1) operation, or at least O(log(N)) if you manage to squeeze thousands of links in one screen. It does so by assigning a letter to each link using ace-jump-mode.
#+begin_src emacs-lisp
  (use-package ace-link
    :init
    (progn
      (ace-link-setup-default)
      (define-key org-mode-map (kbd "M-o") 'ace-link-org)))
#+end_src
** Avy
Avy is a replacement for ace-jump mode which is an implementation of easymotion, a vim plugin.
#+begin_src emacs-lisp
  (use-package avy
    :config
    (avy-setup-default))
#+end_src
** iedit					       :bind:bind_documented:
Iedit is interactive edit, where if you are on a word and you enter iedit-mode, you're basically editing every instance of that word/variable in the buffer.
#+BEGIN_SRC emacs-lisp
  (use-package iedit
    :bind ("C-;" . iedit-mode))
#+END_SRC
** multiple-cursors				       :bind:bind_documented:
When you have an active region that spans multiple lines, the C-S-c C-S-c will add a cursor to each line.

When you want to add multiple cursors not based on continuous lines, but based on keywords in the buffer, 
use C->, C-< or C-c C-y. First mark the word, then add more cursors.

To get out of multiple-cursors-mode, press <return> or C-g. The latter will first disable multiple regions 
before disabling multiple cursors. If you want to insert a newline in multiple-cursors-mode, use C-j.

#+begin_src emacs-lisp
  (use-package multiple-cursors
    :bind ( ;; ("C-S-c C-S-c" . mc/edit-lines)
           ("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           ;; ("C-c C-<" . mc/mark-all-like-this)
           ("C-S-<mouse-1>" . mc/add-cursor-on-click)))
#+end_src
** move-text					       :bind:bind_documented:
#+begin_src emacs-lisp
  ;; move-text - allows to move region or line with M-up or M-down
  (use-package move-text
    :init (move-text-default-bindings))
#+end_src
** xah-find

This package provides emacs commands for find replace in a directory, 
similar to unix grep and sed, but written entirely in emacs lisp.

http://ergoemacs.org/emacs/elisp-xah-find-text.html

This package provides these commands:

+ ~xah-find-text~
+ ~xah-find-text-regex~
+ ~xah-find-count~
+ ~xah-find-replace-text~
+ ~xah-find-replace-text-regex~

#+begin_src emacs-lisp
  (use-package xah-find)
#+end_src

** hungrydelete
Delete all whitespace in one direction.
#+begin_src emacs-lisp
  ;; hungry-delete
  ; it makes backspace and C-d erase all consecutive white space in a given direction (instead of just one).
  (use-package hungry-delete
    :delight
    :init (global-hungry-delete-mode))
#+end_src
** rainbow-delimiters
Rainbow Delimters paints delimiters, e.g. parenthese in different colours.
( ( even in (org)))

#+begin_src emacs-lisp
  ;; rainbow-delimiters - colored delimeters e.g. parentheses
  (use-package rainbow-delimiters
    :delight
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'org-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'markdown-mode-hook #'rainbow-delimiters-mode))
#+end_src

** which-key
https://github.com/justbur/emacs-which-key
#+begin_src emacs-lisp
  (use-package which-key
    :delight
    :init
    (which-key-setup-minibuffer)
    (which-key-mode))
#+end_src

** expand-region
https://github.com/magnars/expand-region.el

#+begin_src emacs-lisp
  ; expand the marked region in semantic increments (negative prefix to reduce region)
  (use-package expand-region
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))
#+end_src

** shell-pop
Bind ~C-t~ to open a shell-popup inside emacs. On Linux it will use ~/bin/bash~ 
and on Windows it will use ~eshell~.

Idea: http://pragmaticemacs.com/emacs/pop-up-a-quick-shell-with-shell-pop/
#+begin_src emacs-lisp
  (use-package shell-pop
    :bind (("C-t" . shell-pop))
    :config

    (if (string-equal system-type "gnu/linux")
        (progn                            ; true
          (setq shell-pop-shell-type (quote ("ansi-term" "*ansi-term*" (lambda nil (ansi-term shell-pop-term-shell)))))
          (setq shell-pop-term-shell "/bin/bash"))
      (progn                              ; false
        (setq shell-pop-shell-type (quote ("eshell" "*eshell*" (lambda () (eshell)))))))

    ;; need to do this manually or not picked up by `shell-pop'
    (shell-pop--set-shell-type 'shell-pop-shell-type shell-pop-shell-type))
#+end_src

** editorconfig
Editorconfig is a project that enables to define 
project specific editor settings for different
editors. More here: http://editorconfig.org/g 

#+begin_src emacs-lisp
  (use-package editorconfig
    :config
    ;; use builtin engine instead of external tools
    (set-variable 'editorconfig-get-properties-function
                  #'editorconfig-core-get-properties-hash)
    (editorconfig-mode 1))
#+end_src
** DISABLED dired+
enhanced dired.

a short video intro http://cestlaz.github.io/posts/using-emacs-38-dired/
#+begin_src emacs-lisp
  (use-package dired+
    :config (require 'dired+))
#+end_src
** DISABLED dired-details+

https://www.emacswiki.org/emacs/DiredDetails

~(~ is bind to ~dired-details-toggle~

#+begin_src emacs-lisp
  (use-package dired-details+
    :ensure t
    :config (setq dired-details-propagate-flag t) ; remembers hide/show details settings
    )
#+end_src

** normal regexp in emacs
~pcre-mode~ allows to use normal regexp inside Emacs instead of escaping.

https://github.com/joddie/pcre2el

~rxt-mode~ or ~rxt-global-mode~ enables the default keybindings.

Now I can use ~.*(jpg|png)~ instead of ~.*\(jpg\|png\)~.

#+begin_src emacs-lisp
  (use-package pcre2el
    :init (pcre-mode))
#+end_src
** expand-region
https://github.com/magnars/expand-region.el

#+begin_src emacs-lisp
  (use-package expand-region
    :bind (("C-=" . er/expand-region))
    )
#+end_src
** helpful
https://github.com/Wilfred/helpful

#+begin_src emacs-lisp
  (use-package helpful
    :bind (("C-c C-." . helpful-at-point))
    :init
    ;; use helpful with swiper
    (setq counsel-describe-function-function 'helpful-callable) ; C-h f
    (setq counsel-describe-variable-function 'helpful-variable) ; C-h v
    )
#+end_src

** imenu-list
Some explanation here:

https://jblevins.org/log/markdown-imenu

#+begin_src emacs-lisp
(use-package imenu-list
  :ensure t
  :bind (("C-'" . imenu-list-smart-toggle))
  :config
  (setq imenu-list-focus-after-activation t
        imenu-list-auto-resize nil))
#+end_src

* ELISP - setting up Lisp editing

** Eldoc
Eldoc provides minibuffer hints when working with Emacs Lisp.
#+begin_src emacs-lisp
  (use-package "eldoc"
    :delight
    :commands turn-on-eldoc-mode
    :init
    (progn
      (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
      (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
      (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)))
#+end_src
** DISABLED Paredit
#+begin_src emacs-lisp
 (use-package paredit)
#+end_src
** Lispy

#+begin_src emacs-lisp
  (use-package lispy
    :init
    (add-hook 'emacs-lisp-mode-hook (lambda () (lispy-mode 1))))
#+end_src
   
** Elisp Slime Navigation
https://github.com/purcell/elisp-slime-nav
adds Slime navigation to elisp & ielm
- ~M-.~ to navigate to symbol at point
- ~M-,~ to pop back to the previous mark

#+BEGIN_SRC emacs-lisp
(use-package elisp-slime-nav
  :ensure t
  :init
  (dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
  (add-hook hook 'elisp-slime-nav-mode))
    
)
#+END_SRC


* EVIL
** DISABLED evil
#+begin_src emacs-lisp
;; Evil Mode

(use-package evil
  :init
  (progn
    (setq evil-want-C-u-scroll t))
  :config
  (progn
    (evil-mode 1)

    ; Color cursor based on mode
    (setq evil-emacs-state-cursor '("red" box))
    (setq evil-normal-state-cursor '("green" box))
    (setq evil-visual-state-cursor '("orange" box))
    (setq evil-insert-state-cursor '("red" bar))
    (setq evil-replace-state-cursor '("red" bar))
    (setq evil-operator-state-cursor '("red" hollow))

    ; Wipe out most existing C- bindings
    (dolist (key '("\C-a" "\C-b" "\C-c" "\C-d" "\C-e" "\C-f" "\C-g"
                   "\C-h" "\C-j" "\C-k" "\C-l" "\C-n" "\C-o" "\C-p"
                   "\C-q" "\C-t" "\C-u" "\C-v" "\C-x" "\C-z" "\e"))
      (global-unset-key key))

    ; C-w to delete words
    (define-key minibuffer-local-map (kbd "C-w") 'backward-kill-word)
    ;(define-key minibuffer-local-map (kbd "C-6") 'evil-buffer)

    ; j and k move the visual line in long wrapped lines
    (define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
(define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)))
#+end_src
** DISABLED evil-leader
#+begin_src emacs-lisp
; Setup , as a leader
(use-package evil-leader
  :config
  (progn
    (global-evil-leader-mode)
    (setq evil-leader/in-all-states 1)
    (evil-leader/set-leader ","))

    ; ,x to be M-x
(evil-leader/set-key "x" 'execute-extended-command))
#+end_src
** DISABLED evil-escape
#+begin_src emacs-lisp
; Allow escaping of lots of things
(use-package evil-escape
  :config
  (progn
    (evil-escape-mode)
(global-set-key (kbd "<escape>") 'evil-escape)))
#+end_src
** DISABLED evil-matchit
#+begin_src emacs-lisp
; Various tag matching
(use-package evil-matchit)
#+end_src
** DISABLED evil-numbers
#+begin_src emacs-lisp
; C-+ C-- to increase/decrease number like Vim's C-a C-x
(use-package evil-numbers
  :config
  (progn
    (define-key evil-normal-state-map (kbd "C-=") 'evil-numbers/inc-at-pt)
(define-key evil-normal-state-map (kbd "C--") 'evil-numbers/dec-at-pt)))
#+end_src
** DISABLED evil-surround
#+begin_src emacs-lisp
; Surround
(use-package evil-surround
  :load-path "packages/evil-surround"
  :config
  (progn
(global-evil-surround-mode 1)))
#+end_src
** DISABLED evil-tabs
#+begin_src emacs-lisp
; Tabs
(use-package evil-tabs
  :config
  (progn
    (global-evil-tabs-mode t)
    (evil-leader/set-key "t" 'elscreen-create)
    (global-unset-key (kbd "C-l"))
    (global-unset-key (kbd "C-h"))
    (define-key evil-normal-state-map (kbd "C-l") 'elscreen-next)
(define-key evil-normal-state-map (kbd "C-h") 'elscreen-previous)))
#+end_src

** evil
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :bind ()
  :mode ()
  :config ()
  :init
    (evil-mode 1)
)
#+END_SRC
* Markup or programming languages
** company mode - autocompletion
e.g. used by emacs-racer (rust)
#+BEGIN_SRC emacs-lisp
  (use-package company
    :delight
    :init
    (global-company-mode)
    :config
        ;; (setq company-backends  '(company-ycmd
        ;;       company-bbdb
        ;;       company-nxml
        ;;       company-css
        ;;       company-eclim
        ;;       company-semantic
        ;;       company-xcode
        ;;       ;; company-ropemacs
        ;;       company-cmake
        ;;       company-capf
        ;;       (company-dabbrev-code company-gtags company-etags company-keywords)
        ;;       company-oddmuse
        ;;       company-files
        ;;       company-dabbrev))
    (define-key company-active-map (kbd "\C-n") 'company-select-next)
    (define-key company-active-map (kbd "\C-p") 'company-select-previous)
    (define-key company-active-map (kbd "\C-d") 'company-show-doc-buffer)
    (define-key company-active-map (kbd "M-.") 'company-show-location))
#+END_SRC
** company-quickhelp
Provides e.g. in elpy a quickhelp about the function. 
#+BEGIN_SRC emacs-lisp
  (use-package company-quickhelp
    :init
    (company-quickhelp-mode 1))
#+END_SRC

** company-auctex
#+BEGIN_SRC emacs-lisp
  (use-package company-auctex
    :if (boundp 'dh/not-at-work)
    :delight
    :init
    (progn
      (company-auctex-init)))
#+END_SRC

** dumb-jump
Tags-like navigation in programming source files,

more over it here:
http://irreal.org/blog/?p=6218
https://github.com/jacktasia/dumb-jump

But beware it needs external tools, e.g. ag or ripgrep. I prefer ripgrep.
#+begin_src emacs-lisp
(use-package dumb-jump
  :ensure t
  :if (executable-find "rg")
  :bind (("M-g o" . dumb-jump-go-other-window)
         ("M-g j" . dumb-jump-go)
         ("M-g b" . dumb-jump-back)
         ("M-g q" . dumb-jump-quick-look)
         ("M-g x" . dumb-jump-go-prefer-external)
         ("M-g z" . dumb-jump-go-prefer-external-other-window))
  :config (setq dumb-jump-selector 'ivy))
#+end_src
** poporg
WRITE CODE COMMENTS IN ORG-MODE WITH POPORG
http://pragmaticemacs.com/emacs/write-code-comments-in-org-mode-with-poporg/

~C-c /~ calls ~poporg-dwim~, that creates a temporary org-window to write
comments with org markup, the poporg buffer can be closed with ~C-x C-s~.

During the editing side by side "C-c C-c" would update the comment in the 
original window.
#+BEGIN_SRC emacs-lisp
  (use-package poporg
    :ensure t
    :bind (("C-c /" . poporg-dwim)))
#+END_SRC
** json
#+BEGIN_SRC emacs-lisp
  (use-package json-mode)
#+END_SRC
** yaml
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :mode ("\\.yml\\'" . yaml-mode))
#+END_SRC
** webmode
http://cestlaz.github.io/posts/using-emacs-21-web-mode

#+begin_src emacs-lisp
  (use-package web-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (setq web-mode-ac-sources-alist
          '(("css" . (ac-source-css-property))
            ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
    (setq web-mode-enable-auto-closing t)
    (setq web-mode-enable-auto-quoting t)) ; this fixes the quote problem I mentioned
#+end_src
** emmet
#+begin_src emacs-lisp
  ;; emmet css selectors for Markup
  (use-package emmet-mode
    :init
    (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
    (add-hook 'html-mode-hook 'emmet-mode)
    (add-hook 'web-mode-hook 'emmet-mode)
    (add-hook 'css-mode-hook 'emmet-mode))
#+end_src
** bat-mode Windows Batch files
#+begin_src emacs-lisp
  ;; bat-mode - for syntax highlighting of batch files
  (add-to-list 'auto-mode-alist '("\\.bat$" . bat-mode))
#+end_src
** whitespace
use whitespace mode, and mark lines longer than 80 characters. Not enabled per
default. Either as hook, e.g. markdown-mode or manually enabled
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :init
    ;; use whitespace mode, and mark lines longer than 80 characters
    (setq whitespace-style '(face empty lines-tail trailing))
    (setq whitespace-line-column 80)
    ;; (global-whitespace-mode)
    )
#+END_SRC
** markdown-mode
One of my most used packages is Markdown-Mode combined with Pandoc-Mode. 

https://jblevins.org/projects/markdown-mode/

It has a lot of useful commands. But I wrote my own hydra for most used
markup - that is bound to F11.

#+begin_src emacs-lisp
  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :bind (:map markdown-mode-map
                ("C-c e" . markdown-edit-code-block) ; original mapping C-c '
                )
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.txt\\'" . markdown-mode)
           ("\\.mmd\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init
    ;; link to css-styles
    ;; markdown-css-paths - CSS file to link to in XHTML output (default: "").
                                          ;(setq markdown-css-paths (concat (getenv "HOME") "markdown-css-themes/foghorn.css"))
    ;; meta element is necessary that utf-8 umlauts are displayed correctly in the browser
    (setq markdown-xhtml-header-content "<meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\" />")
    ;; enable org-table mode in markdown-mode
    (add-hook 'markdown-mode-hook 'turn-on-orgtbl)
    ;; enable whitespace- mode in markdown-mode
    (add-hook 'markdown-mode-hook 'whitespace-mode)
    ;; enable auto-fill-mode in markdown-mode
    (add-hook 'markdown-mode-hook 'auto-fill-mode)

    ;; enabling imenu support
    ;; https://jblevins.org/log/markdown-imenu
    (add-hook 'markdown-mode-hook 'imenu-add-menubar-index)
    (setq imenu-auto-rescan t)
    
    ;; disabling prefix prompts because I enabled which-key
    (setq markdown-enable-prefix-prompts nil)

    ;; using pandoc if available otherwise multimarkdown
    (cond
     ;; using pandoc if available
     ((executable-find "pandoc")
      (setq markdown-command
            (concat
             (executable-find "pandoc")
             " --from=markdown --to=html --quiet"
             " --standalone --mathjax --highlight-style=pygments")))
     ;; otherwise testing for multimarkdown
     ((executable-find "multimarkdown")
      (setq markdown-command (executable-find "multimarkdown")))))
#+end_src

** grip for markdown preview 
https://github.com/seagle0128/grip-mode

a markdown preview mode for emacs, but it needs python installed and the python module named grip

~pip install grip~

#+BEGIN_SRC emacs-lisp
(use-package grip-mode
  :if (boundp 'dh/not-at-work)
  :ensure t
  :bind (:map markdown-mode-command-map
         ("g" . grip-mode))
)
#+END_SRC

** edit-indirect
Package is used to edit src blocks in
markdown-mode, usually invoked via ~C-c '~.

But I also added ~C-c e~ like I used for 
org-edit-special.

Package only on Windows, because it throws error
on MELPA for Linux
#+begin_src emacs-lisp
  (use-package edit-indirect
    :delight
    :bind (:map edit-indirect-mode-map
                ("C-c e" . edit-indirect-commit) ; original mapping C-c '
                ))
#+end_src
** pandoc
#+BEGIN_SRC emacs-lisp
  (defun dh/load-my-pandoc-settings ()
    "Load my pandoc default settings"
    (interactive)
    (pandoc-set-write "docx"))


  (use-package pandoc-mode
    :init
    (progn
      (add-hook 'markdown-mode-hook 'pandoc-mode)
      (add-hook 'pandoc-mode-hook 'pandoc-load-default-settings)
      (add-hook 'pandoc-mode-hook 'dh/load-my-pandoc-settings)))
#+END_SRC

** textile
#+begin_src emacs-lisp
  (use-package textile-mode
    :mode ("\\.textile\\'" . textile-mode))
#+end_src
** restructured text
It's already built in and no external package.
#+begin_src emacs-lisp
  (require 'rst)
  (setq auto-mode-alist
        (append '(("\\.rst\\'" . rst-mode)
                  ("\\.rest\\'" . rst-mode)) auto-mode-alist))
#+end_src
** DISABLED AUCTeX - LaTeX old
#+BEGIN_SRC emacs-lisp
;; AUCTeX aktivieren - Hilfe C-h i m auctex
;(load "auctex.el" nil t t)
;(load "preview-latex.el" nil t t)
;;  make AUCTeX aware of style files and multi-file documents


(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)
(setq TeX-PDF-mode t)

(add-hook 'LaTeX-mode-hook
    (function
        (lambda ()
            (define-key LaTeX-mode-map (kbd "C-c C-a")
                'align-current))))

(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)
#+END_SRC
** LaTeX - AUCTeX
#+begin_src emacs-lisp
  (use-package tex-site                   ; auctex
    :if (boundp 'dh/not-at-work)
    :ensure auctex
                                          ;:load-path "site-lisp/auctex/"
    :mode ("\\.tex\\'" . TeX-latex-mode)
    :init
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil)
    (setq TeX-PDF-mode t)
    (add-hook 'LaTeX-mode-hook
              (lambda ()
                (rainbow-delimiters-mode)
                (company-mode)
                (smartparens-mode)
                (turn-on-reftex)
                (setq reftex-plug-into-AUCTeX t)
                (reftex-isearch-minor-mode)
                (setq TeX-PDF-mode t))))
#+end_src

** Rust

Enabling rust-mode for syntax highlighting

#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :if (executable-find "rustup")
    :mode ("\\.rs\\'" . rust-mode)
    :config
    (setq rust-format-on-save t) ; enabling running rustfmt automatically on save
    )
#+END_SRC

rust-racer for autocompletion

#+BEGIN_SRC emacs-lisp
  (use-package racer
    :if (executable-find "rustup")
    :init
    (progn
      (add-hook 'rust-mode-hook #'racer-mode)
      (add-hook 'racer-mode-hook #'eldoc-mode)
      (add-hook 'racer-mode-hook #'company-mode)

      (require 'rust-mode)
      (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
      (setq company-tooltip-align-annotations t)))
#+END_SRC

flycheck-rust

#+begin_src emacs-lisp
  (use-package flycheck-rust
    :if (executable-find "rustup")
    :init
    (progn (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)))
#+end_src

** TOML
#+BEGIN_SRC emacs-lisp
  (use-package toml-mode)
#+END_SRC

** Python
lpy by Abo Abo & company-jedi

*** lpy

lpy - lispy for python by AboAbo.

https://github.com/abo-abo/lpy

Currently only on Github, but probably soon on MELPA. 

Github repo is added as submodule and the content is in ~.emacs.d/local-packages/lpy~.
All directories inside ~local-packages~ will be added 

#+BEGIN_SRC emacs-lisp
  (when (executable-find "python")
    ;; (require 'lpy)
    )
#+END_SRC

*** company-jedi
company-jedi requires > pip install sexpdata epc virtualenv
#+begin_src emacs-lisp
  (use-package company-jedi ; company-mode completion back-end for Python JEDI
    :if (executable-find "python")
    :delight
    :config
    ;; (setq jedi:environment-virtualenv (list (expand-file-name "~/.emacs.d/.python-environments/")))
    (setq jedi:environment-virtualenv (list (expand-file-name ".python-environments/" dh/emacs-local-dir)))
    (add-hook 'python-mode-hook 'jedi:setup)
    (setq jedi:complete-on-dot t)
    (setq jedi:use-shortcuts t)
    (defun config/enable-company-jedi ()
      (add-to-list 'company-backends 'company-jedi))
    (add-hook 'python-mode-hook 'config/enable-company-jedi))
#+end_src

**  slime-company

https://github.com/anwyn/slime-company

#+begin_src emacs-lisp
  ;; will be activated within setup of Slime
  (use-package slime-company
    :if (executable-find "sbcl"))
#+end_src

** slime - common lisp repl

CL interface for Emacs

https://common-lisp.net/project/slime/doc/html/

I use Steel Bank Common Lisp (http://sbcl.org/).

#+begin_src emacs-lisp
  (use-package slime
    :if (executable-find "sbcl")
    :config
    (setq inferior-lisp-program (executable-find "sbcl"))
    (when (string-equal system-type "windows-nt")
      (setq slime-lisp-implementations `((sbcl (,(executable-find "sbcl") "--core" ,(concat (substring (executable-find "sbcl") 0 -3) "core"))))))
    ;; (slime-setup '(slime-fancy slime-company))
    (setq slime-contribs '(slime-fancy))
    (setq slime-repl-history-file (expand-file-name ".slime-history.eld" dh/emacs-local-dir))
    ;; enabling quicklisp via quicklisp/slime-helper.el
    ;;
    ;; quicklisp is located in the user directory
    (if (file-exists-p (expand-file-name "~/slime-helper.el"))
        (load (expand-file-name "~/slime-helper.el"))
      ;; else call slime-setup manually
      (slime-setup '(slime-fancy slime-company slime-autodoc))))


      
#+end_src

* hydra
https://github.com/abo-abo/hydra
https://github.com/abo-abo/hydra/wiki
#+BEGIN_SRC emacs-lisp
  (use-package hydra)
#+END_SRC

** own Hydras
*** Vergabe-Templates HauptmenÃ¼			  :hydrabind:hydradocumented:
#+BEGIN_SRC emacs-lisp
(defun dh/expand-snippet (str)
  "Expand yas snippet template."
  (insert str)
  (yas-expand))

(defhydra dh-vergabesnippets-main (:foreign-keys warn :exit t :hint nil)
  "
Vergabe-Snippets HauptmenÃ¼

_t_: Allgemeine Vergabe-Templates     

_b_: BegrÃ¼ndungen                      _a_: Vergabearten nach Â§ 3 VOL/A


_k_: KurzbegrÃ¼ndung                    _v_: Telefon/GesprÃ¤chsvermerk               _s_: Sonstige Templates

"
  ("t" dh-vergabesnippets-templates/body)
  ("b" dh-vergabesnippets-begruendungen/body)  
  ("a" dh-vergabesnippets-vergabearten/body)
  ("k" (dh/expand-snippet "v_t_kb"))  
  ("v" (dh/expand-snippet "w_tv"))
  ("s" dh-vergabesnippets-sonstige/body)
  ("q" nil "Quit"))

(global-set-key [f10] 'dh-vergabesnippets-main/body)

(defhydra dh-vergabesnippets-templates (:foreign-keys warn :exit t :hint nil)
  "
Vergabe-Snippets - Allgemeine Templates

_k_: KurzbegrÃ¼ndung               _A_: Auftragserteilung (nach Auswertung)
_a_: Angebotsabfrage              _r_: Angebotsabfrage aus RV                _c_: Angebotsabfrage RV Computacenter
_b_: Beauftragung per E-Mail      _R_: Beauftragung aus RV per E-Mail                                     
"
  ("k" (dh/expand-snippet "v_t_kb"))
  ("A" (dh/expand-snippet "v_t_auftragserteilung"))
  ("a" (dh/expand-snippet "v_t_angebotsabfrage"))
  ("r" (dh/expand-snippet "v_t_angebotsabfrage_rv"))
  ("c" (dh/expand-snippet "v_t_angebotsabfrage_rv_20021"))    
  ("b" (dh/expand-snippet "v_t_beauftragung_email"))    
  ("R" (dh/expand-snippet "v_t_beauftragung_email_rv"))    
  ("z" dh-vergabesnippets-main/body "ZurÃ¼ck zum HauptmenÃ¼")
  ("q" nil "Quit"))

(defhydra dh-vergabesnippets-vergabearten (:foreign-keys warn :exit t :hint nil)
  "
Vergabe-Snippets - Vergabearten

_r_: Abruf aus Rahmenvertrag                                                      _d_: Direktkauf - Â§ 3 Abs. 6 VOL/A       

_Ã¶_: Ãffentliche Ausschreibung - Â§ 3 Abs. 2 i.V.m. Abs. 1 VOL/A     
_b_: BeschrÃ¤nkte Ausschreibung mit Teilnahmewettbewerb - Â§ 3 Abs. 3 a) VOL/A 
_B_: BeschrÃ¤nkte Ausschreibung ohne Teilnahmewettbewerb - Â§ 3 Abs. 4 b) VOL/A

FreihÃ¤ndige Vergaben:
---------------------
_n_: geringfÃ¼gige Nachbestellung - Â§ 3 Abs. 5 c) VOL/A                            _D_: unverschuldete Dringlichkeit - Â§ 3 Abs. 5 g) VOL/A
_h_: bis HÃ¶chstwert 15.000 â¬ lt. BMUB - Â§ 3 Abs. 5 i) VOL/A                       _1_: nur 1 Unternehmen kommt in Betracht - Â§ 3 Abs. 5 l) VOL/A
"
  ("r" (dh/expand-snippet "v_a_rahmenvertrag"))
  ("d" (dh/expand-snippet "v_a_6_direktkauf"))
  ;; Ausschreibungen
  ("Ã¶" (dh/expand-snippet "v_a_2_oeffentlich"))
  ("b" (dh/expand-snippet "v_a_3a_beschraenkt"))  
  ("B" (dh/expand-snippet "v_a_4b_beschraenkt"))
  ;; FreihÃ¤ndige Vergaben
  ("n" (dh/expand-snippet "v_a_5c_freihaendig"))
  ("D" (dh/expand-snippet "v_a_5g_freihaendig"))
  ("h" (dh/expand-snippet "v_a_5i_freihaendig"))
  ("1" (dh/expand-snippet "v_a_5l_freihaendig"))
  ("z" dh-vergabesnippets-main/body "ZurÃ¼ck zum HauptmenÃ¼")
  ("q" nil "Quit"))

(defhydra dh-vergabesnippets-begruendungen (:foreign-keys warn :exit t :hint nil)
  "
Vergabe-Snippets - BegrÃ¼ndungen

_k_: KurzbegrÃ¼ndung (Template)

_H_: Notwendigkeit von HP-CarePack Services

_m_: MarktÃ¼blichkeit von Vorleistungen      _h_: Bezug von Hersteller 


"
  ("k" (dh/expand-snippet "v_t_kb"))
  ("H" (dh/expand-snippet "v_b_hp_carepack"))
  ("h" (dh/expand-snippet "v_b_hersteller"))
  ("m" (dh/expand-snippet "v_b_marktueblich"))
  ("z" dh-vergabesnippets-main/body "ZurÃ¼ck zum HauptmenÃ¼")
  ("q" nil "Quit"))

(defhydra dh-vergabesnippets-sonstige (:foreign-keys warn :exit t :hint nil)
  "
Vergabe-Snippets - Sonstige Templates

_v_: Telefon/GesprÃ¤chsvermerk

_p_: Protokoll FGR Z 2.1

"
  ("v" (dh/expand-snippet "w_tv"))
  ("p" (dh/expand-snippet "w_fgrZ2.2"))
  ("z" dh-vergabesnippets-main/body "ZurÃ¼ck zum HauptmenÃ¼")
  ("q" nil "Quit"))
#+END_SRC
*** Major & minor modes				  :hydrabind:hydradocumented:
A own hydra for switching to most used major or minor modes. 
#+BEGIN_SRC emacs-lisp

(defhydra dh-hydra-modes (:hint nil)
  "
âââââââââââââââââââââââââââââââââââ
â major & minor modes          â
âââââââââââââââââââââââââââââââââââ

_t_ext        _m_arkdown     _o_rg        _e_lisp            _c_sv        _r_ust

auto-_f_ill   _a_lign        _i_spell     visual-_l_ine     _L_inum       _w_hitespace
"


  ("t" text-mode)
  ("m" markdown-mode)
  ("o" org-mode)
  ("e" lisp-mode)
  ("c" csv-mode)
  ("r" rust-mode)

  ("f" auto-fill-mode)
  ("a" align-regexp :color blue)
  ("i" ispell-buffer :color blue)
  ("l" visual-line-mode)
  ("L" linum-mode)
  ("w" whitespace-mode))

(global-set-key [S-f11] 'dh-hydra-modes/body)
#+END_SRC

*** markdown
#+BEGIN_SRC emacs-lisp
(defhydra dh-hydra-markdown-mode (:hint nil)
  "
Formatting        C-c C-s    _s_: bold          _e_: italic     _b_: blockquote   _p_: pre-formatted    _c_: code

Headings          C-c C-t    _h_: automatic     _1_: h1         _2_: h2           _3_: h3               _4_: h4

Lists             C-c C-x    _m_: insert item   

Demote/Promote    C-c C-x    _l_: promote       _r_: demote     _u_: move up      _d_: move down

Links, footnotes  C-c C-a    _L_: link          _U_: uri        _F_: footnote     _W_: wiki-link      _R_: reference
 
"


  ("s" markdown-insert-bold)
  ("e" markdown-insert-italic)
  ("b" markdown-insert-blockquote :color blue)
  ("p" markdown-insert-pre :color blue)
  ("c" markdown-insert-code)

  ("h" markdown-insert-header-dwim) 
  ("1" markdown-insert-header-atx-1)
  ("2" markdown-insert-header-atx-2)
  ("3" markdown-insert-header-atx-3)
  ("4" markdown-insert-header-atx-4)

  ("m" markdown-insert-list-item)

  ("l" markdown-promote)
  ("r" markdown-demote)
  ("d" markdown-move-down)
  ("u" markdown-move-up)  

  ("L" markdown-insert-link :color blue)
  ("U" markdown-insert-uri :color blue)
  ("F" markdown-insert-footnote :color blue)
  ("W" markdown-insert-wiki-link :color blue)
  ("R" markdown-insert-reference-link-dwim :color blue) 
)


(global-set-key [f11] 'dh-hydra-markdown-mode/body)
#+END_SRC
*** info-help
A simple hydra that displays my hydras or other useful commands.

#+BEGIN_SRC emacs-lisp
  (defhydra dh-hydra-info-help (:color blue
                                       :columns 3)
    "dh - useful info"
    ("S-<F1>" (lambda () (interactive)
                (dh/open-file-in-emacs (expand-file-name "config.org" user-emacs-directory)))
     "open config.org")
    ("<M-F1>" (lambda () (interactive)
                (dh/open-file-in-emacs (expand-file-name "elisp-playground.org" user-emacs-directory))) "opens elisp-playground.org")
    ("C-<F2>" 'dh-hydra-zoom/body "zoom (hydra)")
    ("<F10>" 'dh-vergabesnippets-main/body "Vergabesnippets (hydra)")
    ("<F11>" 'dh-hydra-markdown-mode/body "useful markdown commands (hydra)")
    ("<F12>" 'dh/open-sys-file-manager "open current directory in explorer")
    ("C-<F12>" 'xah-make-backup-and-save "make a backupfile for the current file")
    ("S-<F12>" (lambda () (interactive)
                 (dh/open-file-in-emacs (expand-file-name "Current_Tasks.org" org-directory))) "open Current_Tasks.org")
    ("S-<F11>" 'dh-hydra-modes/body "mode switching (hydra)")
    ("C-x SPC" 'dh-hydra-rectangle/body "rectangle (hydra)")

    ("q" nil "cancel"))

  (global-set-key [C-f1] 'dh-hydra-info-help/body)
#+END_SRC

** copied Hydras
*** org-structural-templates with < 				  :hydrabind:
http://oremacs.com/2015/03/07/hydra-org-templates/
#+begin_quote

#+end_quote
#+BEGIN_SRC emacs-lisp
(defhydra hydra-org-template (:color blue :hint nil)
  "
_c_enter    _q_uote        _L_aTeX:
_a_scii     _e_xample      _i_ndex:
_H_tml      _v_erse        _I_NCLUDE:
_h_tml      _p_ractice     _H_TML:
_s_rc       ^ ^            _A_SCII:

e_l_isp     _u_sepackage:
"
  ("s" (hot-expand "<s"))
  ("e" (hot-expand "<e"))
  ("l" (hot-expand "<l"))
  ("u" (hot-expand "<u"))
  ("q" (hot-expand "<q"))
  ("v" (hot-expand "<v"))
  ("c" (hot-expand "<c"))
  ("l" (hot-expand "<l"))
  ("h" (hot-expand "<h"))
  ("a" (hot-expand "<a"))
  ("L" (hot-expand "<L"))
  ("i" (hot-expand "<i"))
  ("I" (hot-expand "<I"))
  ("H" (hot-expand "<H"))
  ("A" (hot-expand "<A"))
  ("p" (hot-expand "<p"))
  ("<" self-insert-command "ins")
  ("o" nil "quit"))

(defun hot-expand (str)
  "Expand org template."
  (insert str)
  (org-try-structure-completion))


(define-key org-mode-map "<"
  (lambda () (interactive)
     (if (looking-back "^")
         (hydra-org-template/body)
       (self-insert-command 1))))
#+END_SRC
*** rectangle mode						  :hydrabind:
http://oremacs.com/2015/02/25/rectangle-hydra/

What does what:

    d deletes rectangle; it's similar to C-d.
    n copies rectangle; it's similar to M-w.
    o exits; it's very easy to press.
    e exchanges the point and mark; it's also quite useful to re-activate the region if you disabled it with n or r.
    s fills the selected rectangle with a string.
    y yanks the rectangle that you saved before with n.
    r deactivates or activates the rectangle at point.
    u calls undo.
    p kills the rectangle; it's similar to C-w.


#+BEGIN_SRC emacs-lisp
(defun ora-ex-point-mark ()
  (interactive)
  (if rectangle-mark-mode
      (exchange-point-and-mark)
    (let ((mk (mark)))
      (rectangle-mark-mode 1)
      (goto-char mk))))

(defhydra hydra-rectangle (:body-pre (rectangle-mark-mode 1)
                           :color pink
                           :post (deactivate-mark))
  "
  ^_k_^     _d_elete    _s_tring
_h_   _l_   _o_k        _y_ank  
  ^_j_^     _n_ew-copy  _r_eset 
^^^^        _e_xchange  _u_ndo  
^^^^        ^ ^         _p_aste
"
  ("h" backward-char nil)
  ("l" forward-char nil)
  ("k" previous-line nil)
  ("j" next-line nil)
  ("<left>" backward-char nil)
  ("<right>" forward-char nil)
  ("<up>" previous-line nil)
  ("<down>" next-line nil)
  ("e" ora-ex-point-mark nil)
  ("n" copy-rectangle-as-kill nil)
  ("d" delete-rectangle nil)
  ("r" (if (region-active-p)
           (deactivate-mark)
         (rectangle-mark-mode 1)) nil)
  ("y" yank-rectangle nil)
  ("u" undo nil)
  ("s" string-rectangle nil)
  ("p" kill-rectangle nil)
  ("o" nil nil))
(global-set-key (kbd "C-x SPC") 'hydra-rectangle/body)

#+END_SRC
*** Zoom - text-scale 				  :hydrabind:hydradocumented:
#+BEGIN_SRC emacs-lisp
(defhydra dh-hydra-zoom (:hint nil)
  "
_<up>_: text-scale-increase     _<down>_: text-scale-decrease     
_k_: ^   ^text-scale-increase  ^   ^_j_: ^     ^text-scale-decrease

_r_: ^   ^reset text-scale
" 
  ("<up>" text-scale-increase)
  ("<down>" text-scale-decrease)
  ("k" text-scale-increase)
  ("j" text-scale-decreasel)
  ("r" (text-scale-set 0))
  ("0" (text-scale-set 0) :bind nil :exit t)
  ("1" (text-scale-set 0) nil :bind nil :exit t))

(global-set-key [C-f2]         'dh-hydra-zoom/body)
#+END_SRC
*** Info					  :hydrabind:hydradocumented:
based on http://oremacs.com/2015/03/17/more-info/, after getting into an info buffer with <f1>i you can select various info buffers with t.
#+BEGIN_SRC emacs-lisp
(defun dh/open-info (topic bname)
  "Open info on TOPIC in BNAME."
  (if (get-buffer bname)
      (progn
        (switch-to-buffer bname)
        (unless (string-match topic Info-current-file)
          (Info-goto-node (format "(%s)" topic))))
    (info topic bname)))

(defhydra hydra-info-to (:hint nil :color teal)
  "
_o_rg e_l_isp _e_macs _a_uctex _p_andoc"
  ("o" (dh/open-info "org" "*info org*"))
  ("l" (dh/open-info "elisp" "*info elisp*"))
  ("e" (dh/open-info "emacs" "*info emacs*"))
  ("a" (dh/open-info "auctex" "*info auctex*"))
  ("p" (dh/open-info "pandoc-mode" "*info pandoc*")))

(define-key Info-mode-map "t" 'hydra-info-to/body)
#+END_SRC
*** goto-line
#+BEGIN_SRC emacs-lisp
(defhydra hydra-goto-line (goto-map ""
                           :pre (linum-mode 1)
                           :post (linum-mode -1))
  "goto-line"
  ("g" goto-line "go")
  ("m" set-mark-command "mark" :bind nil)
  ("q" nil "quit"))
#+END_SRC


* Ivy, Swiper, Counsel
** loading ivy and activate it
#+begin_src emacs-lisp

  ;; if loaded from MELPA, than I should load counsel first

  (use-package counsel
     :delight)

  (use-package ivy
    :delight
    :config
    ;; add ârecentf-modeâ and bookmarks to âivy-switch-bufferâ.
    (setq ivy-use-virtual-buffers t
          enable-recursive-minibuffers  t
          ivy-count-format "(%d/%d) "
     )
    (ivy-mode 1))

  ;; ivy uses flx for geneating candidates for large lists
  (use-package flx
     :config
     (setq gc-cons-threshold 20000000))

  (use-package swiper
    :delight)
#+end_src
** keybindings: ivy
#+begin_src emacs-lisp
  ;; (global-set-key (kbd "C-s") 'swiper)  ; old line based swiper
  (global-set-key (kbd "C-s") 'swiper-isearch) ; new iSearch like swiper
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "<f6>") 'ivy-resume)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "M-y") 'counsel-yank-pop)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c k") 'counsel-ag)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history) 
#+end_src

** ivy-hydra
#+BEGIN_SRC emacs-lisp
  (use-package ivy-hydra)
#+END_SRC

* larger packages
** Magit & Git
*** magit setup
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :if (executable-find "git")
    :init
    ;; disable the default version control git backend
    ;; can't disable it, because I'd like to use it in neotree & gitgutter
    ;; (setq vc-handled-backends (delq 'Git vc-handled-backends))
    ;; enabling ivy for magit
    (setq magit-completing-read-function 'ivy-completing-read)
    ;; setting kbd
    (global-set-key (kbd "C-x g") 'magit-status)
    (global-set-key (kbd "C-x M-g") 'magit-dispatch-popup))
#+END_SRC

*** setting magit-repository-directories
https://emacs.stackexchange.com/questions/32696/how-to-use-magit-list-repositories

Easy way to manage my Git repositories with Magit is to make them known to it. So
I can see their status with ~M-x magit-list-repositories~ and with ~RET~ I can switch 
into a more detailed view of the repository. The list repository buffer can be updated
with ~g~.

See also http://endlessparentheses.com/it-s-magit-and-you-re-the-magician.html for a 
lot of useful what I can do with Magit.
#+begin_src emacs-lisp
  (when (executable-find "git")

    ;; setting repositories
    ;; .emacs.d repo
    (setq magit-repository-directories
          `((,user-emacs-directory . 0)))

    ;; repos on Windows
    (when (string-equal system-type "windows-nt")

      ;; add emacs-portable-win64 if it is set
      (when (boundp 'dh/emacs-portable-dir)
        (add-to-list 'magit-repository-directories
                     `(,dh/emacs-portable-dir . 0) t))

      ;; usually my Windows repos are on D:\git-repositories
      (if (file-directory-p "d:/git-repositories")
          (add-to-list 'magit-repository-directories
                       '("d:/git-repositories" . 1) t)))

    ;; add various repos on Linux
    (when (string-equal system-type "gnu/linux")

      ;; elisp-playground repo
      (if (file-directory-p (expand-file-name "elisp-playground" (getenv "HOME")))
          (add-to-list 'magit-repository-directories
                       `(,(expand-file-name "elisp-playground" (getenv "HOME")) . 0) t))

      ;; 57-Exercises-for-Programmers repo
      (if (file-directory-p (expand-file-name "57-Exercises-for-Programmers" (getenv "HOME")))
          (add-to-list 'magit-repository-directories
                       `(,(expand-file-name "57-Exercises-for-Programmers" (getenv "HOME")) . 0) t)))

    ;; restructure the output list
    (with-eval-after-load 'magit
      (setcdr (cdr magit-repolist-columns)
              (cons '("D" 1 magit-repolist-column-dirty ())
                    (cddr magit-repolist-columns))))

    (setq magit-repolist-columns
          '(("Name" 25 magit-repolist-column-ident ())
            ("Version" 25 magit-repolist-column-version ())
            ("D" 1 magit-repolist-column-dirty ())
            ("L<U" 3 magit-repolist-column-unpulled-from-upstream ((:right-align t)))
            ("L>U" 3 magit-repolist-column-unpushed-to-upstream ((:right-align t)))
            ("Path" 99 magit-repolist-column-path ()))))
#+end_src
*** DISABLED diff-hl
Diff-hl goes a little further than git-gutter in that it can highlight the
uncommited diffs, even from Dired. And we can get them on the fly while we 
type: ~(diff-hl-flydiff-mode)~

https://github.com/dgutov/diff-hl

#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :if (executable-find "git")
    :init
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
    (global-diff-hl-mode t))
#+END_SRC

*** DISABLED git-gutter
Gitgutter has a lot configuration options and I don't use them currently.
Especially it would be possible to change the gutter colors and chars. 
https://github.com/syohex/emacs-git-gutter

#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :if (executable-find "git")
    :init
    (global-git-gutter-mode 1))
#+END_SRC

*** DISABLED git-gutter+
https://github.com/nonsequitur/git-gutter-plus works also in tty.

#+BEGIN_SRC emacs-lisp
  (use-package git-gutter+
    :if (executable-find "git")
    :init
    (global-git-gutter+-mode))
#+END_SRC

** YASNIPPET
#+begin_src emacs-lisp
  (use-package yasnippet
    :delight
    :init
    ;; preserve initial value of yas-snippets-dir
    (setq yas-snippet-dirs '(yas-installed-snippets-dir))
    (if (file-directory-p (expand-file-name "snippets-dh" user-emacs-directory))
        (push (expand-file-name "snippets-dh" user-emacs-directory) yas-snippet-dirs))
    (if (and
         (boundp 'dh/dropbox-dir)
         (file-directory-p (expand-file-name "dahan_uberspace/snippets-work-copy" dh/dropbox-dir)))
        (push (expand-file-name "dahan_uberspace/snippets-work-copy" dh/dropbox-dir) yas-snippet-dirs))

    (if (boundp 'dh/me-at-work)
        (push (expand-file-name "I:/DATEN/_Daniel/misc/snippets-work") yas-snippet-dirs))

    ;; change the order of the prompt function, prefer ido
    ;;(setq  yas-prompt-functions '(yas-ido-prompt yas-x-prompt yas-dropdown-prompt yas-completing-prompt yas-no-prompt))
    (yas-global-mode 1))
#+end_src


** Projectile
*** projectile setup
A powerful project management framework for emacs.

https://github.com/bbatsov/projectile

#+BEGIN_SRC emacs-lisp
  (use-package projectile)
#+END_SRC

*** counsel-projectile
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :init
    (counsel-projectile-mode))
#+END_SRC

** Org

*** loading org & general settings

#+BEGIN_SRC emacs-lisp
  (use-package org
    :bind (("C-c l" . org-store-link)
           ("C-c c" . org-capture)
           ("C-c a" . org-agenda)
           ("C-c b" . org-iswitchb)
           :map org-mode-map
           ("C-c e" . org-edit-special)   ; original mapping C-c '
           :map org-src-mode-map
           ("C-c e" . org-edit-src-exit)  ; original mapping C-c '
           )
    :mode ("\\.org$" . org-mode)
  )
#+END_SRC
*** general org settings
**** org at home
Trying to use it via iCloud and [[http://beorgapp.com][beorg]] on iOS.

#+begin_src emacs-lisp
  (when (and (boundp 'dh/beorg-dir) (boundp 'dh/not-at-work))
    (message "[dh] Setting home specific settings for org-mode")
    (setq org-directory dh/beorg-dir)
    (setq org-default-notes-file (expand-file-name "ACTIONS.org" org-directory))
    (setq org-todo-keywords
          '((sequence "ACTION(a!)" "RUNNING(r!)" "HABIT(t!)" "P_NEW(n!)" "P_IN_PROGRESS(p!)" "P_WAITING(w@/!)" "|" "DONE(d@)" "CANCELLED(c@)"))))
#+end_src
**** org at work
#+BEGIN_SRC emacs-lisp
  ;; initialize my work config
  (when (boundp 'dh/me-at-work)
    (message "[dh] Setting work specific settings for org-mode")
    (setq org-directory "I:/DATEN/_Daniel/!ORG")
    (setq org-default-notes-file (expand-file-name "Current_Tasks.org" org-directory))
    (setq org-tag-alist '(("Beschaffung" . ?b) ("Lizenzen" . ?l) ("Mobilfunk" . ?m)
                          ("Kommunikation" . ?k) ("ITSicherheit" . ?i) ("FGLeitung" . 102)
                          ("Verschiedenes" . ?v) ("Admin" . ?a) ("Rahmenvertrag" . ?r)))

    (setq org-todo-keywords
          '((sequence "NEW(n!)" "IN_PROCESS(p!)" "WAITING_INT(i@/!)" "WAITING_EXT(e@/!)" "|" "DONE(d@)" "DELEGATED(@)" "CANCELLED(c@)")
            (sequence "O_NEW(N!)" "O_IN_PROCESS(P!)" "O_IN_BIDDING(B!)" "O_IN_FORMAL_BIDDING(F!)" "O_WAITING_INT(I@/!)" "O_WAITING_EXT(E@/!)" "O_APPROVAL(A!)" "O_Z1.2_APPROVAL(Z!)" "O_ORDERED(O@/!)" "O_DELIVERED(D@/!)" "O_UPLOAD_TO_VIBE(V!)" "|" "O_DONE(@)" "O_CANCELLED(@)")
            (sequence "IDEA(!)" "|" "IDEA_APPROVED(a!)" "IDEA_CANCELLED(C!)")
            (sequence "BUG(b!)" "REPORTED(r@/!)" "|" "KNOWNCAUSE(k@)" "FIXED(f@)")))


    ;; description of faces - http://www.gnu.org/software/emacs/manual/html_node/elisp/Face-Attributes.html
    ;; colors - http://raebear.net/comp/emacscolors.html

    ;; monokai-colors - https://github.com/oneKelvinSmith/monokai-emacs/blob/master/monokai-theme.el


    (setq org-todo-keyword-faces
          '(
                                        ; #333333 monokai-gray-dark #3E3D31 monokai-highlight-line
            ("BUG" . (:foreground "#FD5FF0" :background "#3E3D31" :weight bold)) ; monokai-magenta
            ("REPORTED" . (:foreground "#F92672" :background "#3E3D31" :weight bold)) ; monokai-red
            ("KNOWNCAUSE" . (:foreground "#66D9EF" :background "#3E3D31" :weight bold)) ; monokai-blue
            ("FIXED" . (:foreground "#A6E22E" :background "#3E3D31" :weight bold)) ; monokai-green

                                        ; #F3EA98 monokai-yellow-light #E6DB74 monokai-yellow
            ("IDEA" . (:foreground "#333333" :weight bold :background "#E6DB74")) ; monokai-gray-d
            ("IDEA_APPROVED" . (:foreground "#67930F" :weight bold :background "#E6DB74")) ; monokai-green-d
            ("IDEA_CANCELLED" . (:foreground "#F92672" :weight bold :background "#E6DB74")) ; monokai-red

            ;; ("TODO" . (:foreground ,red :weight bold))
            ;; ("WAITING" . (:foreground ,orange :weight bold))
            ;; ("DELEGATED" . (:foreground ,yellow :weight bold))
            ;; ("DONE" . (:foreground ,green :weight bold))
            ;; ("CANCELLED" . (:foreground ,grey :weight bold))
            ;; (:slant italic)

            ("O_NEW" . (:foreground "#FD5FF0" :weight bold)) ; monokai-magenta
            ("O_IN_PROCESS" . (:foreground "#F92672" :weight bold)) ; monokai-red
            ("O_IN_BIDDING" . (:foreground "#F92672" :weight bold)) ; monokai-red
            ("O_IN_FORMAL_BIDDING" . (:foreground "#F92672" :weight bold)) ; monokai-red
            ("O_WAITING_EXT" . (:foreground "#6b6b6b" :weight bold)) ; monokai-gray-light
            ("O_WAITING_INT" . (:foreground "#6b6b6b" :weight bold :slant italic)) ; monokai-gray-light
            ("O_APPROVAL" . (:foreground "#AE81FF" :weight bold)) ; monokai-violet
            ("O_Z1.2_APPROVAL" . (:foreground "#C2A1FF" :weight bold)) ; monokai-violet-light
            ("O_ORDERED" . (:foreground "#FD971F" :weight bold)) ; monokai-yellow
            ("O_DELIVERED" . (:foreground "#A1EFE4" :weight bold)) ; monokai-cyan
            ("O_UPLOAD_TO_VIBE" . (:foreground "#A1EFE4" :weight bold)) ; monokai-cyan
            ("O_DONE" . (:foreground "#A6E22E" :weight bold :slant italic)) ; monokai-green
            ("O_CANCELLED" . (:foreground "#75715E" :weight bold)) ; monokai-comments

            ("NEW" . (:foreground "#FD5FF0" :weight bold :slant italic)) ; monokai-magenta
            ("IN_PROCESS" . (:foreground "#F92672" :weight bold)) ; monokai-red
            ("WAITING_EXT" . (:foreground "#E6DB74" :weight bold)) ; monokai-yellow
            ("WAITING_INT" . (:foreground "#E6DB74" :weight bold :slant italic)) ; monokai-yellow
            ("DELEGATED" . (:foreground "#66D9EF" :weight bold)) ; monokai-blue
            ("DONE" . (:foreground "#A6E22E" :weight bold)) ; monokai-green
            ("CANCELLED" . (:foreground "#75715E" :weight bold)) ; monokai-comments


            ;; ("TODO" . (:foreground "brown1" :weight bold)) ; eg. org-warning)
            ;; ("WAITING" . (:foreground "LemonChiffon1" :weight bold))
            ;; ("DELEGATED" . (:foreground "burlywood3" :weight bold))
            ;; ("DONE" . (:foreground "LimeGreen" :weight bold))
            ;; ("CANCELLED" . (:foreground "darkgrey" :weight bold))
            ))

    (setq org-priority-faces
          '(
            (?A . (:background "firebrick2" :weight bold :foreground "thistle1"))
            (?B . (:background "firebrick2" :weight bold :foreground "thistle1"))
            (?C . (:background "#75715E" :weight bold :foreground "thistle1")) ; bg: monokai-comments
            ))) ;; end_of_ (when (boundp 'dh/me-at-work)
#+END_SRC

**** rest of general org settings 

useful: http://orgmode.org/worg/org-configs/org-customization-guide.html

#+begin_src emacs-lisp
  ;; adding all files in org-directory as agenda files
  (setq org-agenda-files `(,org-directory))

  ;; create org/archive/year directory if it doesn't exist
  (unless (file-directory-p (expand-file-name "archive" org-directory))
    (make-directory (expand-file-name "archive" org-directory)))

  (unless (file-directory-p (expand-file-name (format-time-string "%Y") (expand-file-name "archive" org-directory)))
    (make-directory (expand-file-name (format-time-string "%Y") (expand-file-name "archive" org-directory))))

  (setq org-archive-location (concat (expand-file-name (format-time-string "%Y") (expand-file-name "archive" org-directory)) "/%s::"))
  ;; a cleaner outline view through indentation
  (setq org-startup-indented t) 

  ;; refile - have a look here https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html
  (setq org-refile-targets '((org-agenda-files :maxlevel . 2)) )

  ;; allow refiling to top-level of a file
  (setq org-refile-use-outline-path 'file)
  (setq org-outline-path-complete-in-steps nil)

  ;; allow creating new parents through refiling
  ;; to do so you have to add /new heading at the end of the to refiled item
  ; (setq org-refile-allow-creating-parent-nodes 'confirm)



#+end_src

*** customizing org-faces
**** org-headings

#+begin_src emacs-lisp
  (cond
   ((find-font (font-spec :name "IBM Plex Sans"))
    (set-face-attribute 'org-level-1 nil :font "IBM Plex Sans" :height 1.3)
    (set-face-attribute 'org-level-2 nil :font "IBM Plex Sans" :height 1.2)
    (set-face-attribute 'org-level-3 nil :font "IBM Plex Sans" :height 1.2)
    (set-face-attribute 'org-level-4 nil :font "IBM Plex Sans" :height 1.1)
    (set-face-attribute 'org-level-5 nil :font "IBM Plex Sans")
    (set-face-attribute 'org-level-6 nil :font "IBM Plex Sans")
    (set-face-attribute 'org-level-7 nil :font "IBM Plex Sans")
    (set-face-attribute 'org-level-8 nil :font "IBM Plex Sans")))
#+end_src

**** DISABLED org-default
Now we can have a look at org-default.

+ *bold*, /italics/, _underlined_, +strike-through+
+ =verbatim= verbatim
+ ~code01l~ code 01l

#+begin_src emacs-lisp
  (cond
   ((find-font (font-spec :name "IBM Plex Sans"))
    (set-face-attribute 'org-default nil :font "IBM Plex Sans")))
#+end_src

*** Setting the start visibility
#+BEGIN_SRC emacs-lisp
  (setq org-set-startup-visibility "fold")
  ;; (setq org-startup-folded "content") ; all headlines
#+END_SRC

*** Fontify code in org code blocks
Source: http://orgmode.org/worg/org-contrib/babel/examples/fontify-src-code-blocks.html
#+BEGIN_SRC emacs-lisp
  ;; fontify code in code blocks
  (setq org-src-fontify-natively t)
#+END_SRC

*** Fixing YASnippets tab in org 
http://orgmode.org/manual/Conflicts.html
#+BEGIN_SRC emacs-lisp
  ;; fixing tab-binding for YASnippets in Org-Mode
  (add-hook 'org-mode-hook
            (lambda ()
              (setq-local yas/trigger-key [tab])
              (define-key yas/keymap [tab] 'yas/next-field-or-maybe-expand)))
#+END_SRC

*** org-templates
Structure templates
Org makes it easy to insert blocks by typing <s[TAB], etc. 
I use LaTeX less than Emacs Lisp blocks, so I redefine <l to insert a Lisp block instead.

<u is for an emacs lisp block with use package 

#+BEGIN_SRC emacs-lisp
  (setq org-structure-template-alist
        '(("s" "#+begin_src ?\n\n#+end_src" "<src lang=\"?\">\n\n</src>")
          ("e" "#+begin_example\n?\n#+end_example" "<example>\n?\n</example>")
          ("q" "#+begin_quote\n?\n#+end_quote" "<quote>\n?\n</quote>")
          ("v" "#+BEGIN_VERSE\n?\n#+END_VERSE" "<verse>\n?\n</verse>")
          ("c" "#+BEGIN_COMMENT\n?\n#+END_COMMENT")
          ("p" "#+BEGIN_PRACTICE\n?\n#+END_PRACTICE")
          ("l" "#+begin_src emacs-lisp\n?\n#+end_src" "<src lang=\"emacs-lisp\">\n?\n</src>")
          ("L" "#+latex: " "<literal style=\"latex\">?</literal>")
          ("h" "#+begin_html\n?\n#+end_html" "<literal style=\"html\">\n?\n</literal>")
          ("H" "#+html: " "<literal style=\"html\">?</literal>")
          ("a" "#+begin_ascii\n?\n#+end_ascii")
          ("A" "#+ascii: ")
          ("i" "#+index: ?" "#+index: ?")
          ("I" "#+include %file ?" "<include file=%file markup=\"?\">")))

  (add-to-list 'org-structure-template-alist '("u" "#+BEGIN_SRC emacs-lisp\n(use-package ?\n  :if (boundp 'dh/not-at-work)\n  :ensure t\n  :bind ()\n  :mode ()\n  :config ()\n  :init\n    \n)\n#+END_SRC" "<src lang=\"emacs-lisp\">\n(use-package ?\n  :if (boundp 'dh/not-at-work)\n  :ensure t\n  :bind ()\n  :mode ()\n  :config ()\n  :init\n    \n)\n</src>"))
#+END_SRC

*** Fontify done checkbox items in orgmode
Code based on https://fuco1.github.io/2017-05-25-Fontify-done-checkbox-items-in-org-mode.html
- [ ] category :: xxxx
#+begin_src emacs-lisp
  (font-lock-add-keywords
   'org-mode
   `(("^[ \t]*\\(?:[-+*]\\|[0-9]+[).]\\)[ \t]+\\(\\(?:\\[@\\(?:start:\\)?[0-9]+\\][ \t]*\\)?\\[\\(?:X\\|\\([0-9]+\\)/\\2\\)\\][^\n]*\n\\)" 1 'org-headline-done prepend))
   'append)
#+end_src

*** worf-mode
worf is like Emacs speedkeys but like Vi and mady by abo_abo
http://oremacs.com/worf/README.html
https://github.com/abo-abo/worf

Pretty cool mode, but you have to learn and use it.
#+BEGIN_SRC emacs-lisp
  (use-package worf
    :init (add-hook 'org-mode-hook 'worf-mode))
#+END_SRC






* Finalise my Emacs environment
** yet-another-launcher

Setting up my launchable items. It's recommended to do it at the end, because I might
use variables that we're set on other lines in the config, e.g. org-directory.


#+begin_src emacs-lisp

    ;; load my launcher items at work

    ;; in it I use only add-to-list therefore the item alists should already exist befor

    (if (and (boundp 'dh/me-at-work) (boundp 'dh/emacs-work-extra-dir))
        (progn                              ; true
          (if (file-exists-p (expand-file-name "yal-launchers.el" dh/emacs-work-extra-dir))
              (load (expand-file-name "yal-launchers.el" dh/emacs-work-extra-dir))))
      (progn                                ; false
        ;; first, creating empty lists for my different type of launchers

        ;; that's not necessary, if I am loading my private launchers
        ;; because in yal-launchers.el I create those list as well

        (setq yal/launchable-items-emacs (list))
        (setq yal/launchable-items-system (list))
        (setq yal/launchable-items-url (list))))

    ;; defining a few default entries

    ;; yal/launchable-items-emacs

    (push `("emacs: config.org - my emacs init file" . ,(expand-file-name "config.org" user-emacs-directory)) yal/launchable-items-emacs)

    (when (and (boundp 'dh/emacs-is-portable) (boundp 'dh/emacs-portable-dir))
      (push `("dired: emacs-portable-dir" . ,(expand-file-name dh/emacs-portable-dir)) yal/launchable-items-emacs)
      (push `("emacs-portable: git-pull-emacs-emacs.d.bat" . ,(expand-file-name "git-pull-emacs-emacs.d.bat" dh/emacs-portable-dir)) yal/launchable-items-emacs)
      (push `("emacs-portable: portable-emacs-win64.bat" . ,(expand-file-name "portable-emacs-win64.bat" dh/emacs-portable-dir)) yal/launchable-items-emacs))
  (when (boundp 'dh/iclouddrive-dir)
    ;; beware iCloudDrive directories have strang name in reality, in Windows won't be shown those names directly
    (push `("iCloud: root directory" . ,(expand-file-name dh/iclouddrive-dir)) yal/launchable-items-emacs)
    (push `("iCloud: iA Writer directory" . ,(expand-file-name "27N4MQEA55~pro~writer" dh/iclouddrive-dir)) yal/launchable-items-emacs)
    (push `("iCloud: Textastic directory" . dh/beorg-dir) yal/launchable-items-emacs))

  (when (boundp 'dh/beorg-dir)
    ;; right now my beorg dir is in iCloud Drive
    (push `("beorg: beorg directory" . ,(expand-file-name dh/beorg-dir)) yal/launchable-items-emacs)

    ;; also add my most used org files for task management to yal
    (push `("dired: org-directory" . ,(expand-file-name org-directory)) yal/launchable-items-emacs)
    (push `("beorg: org-directory" . ,(expand-file-name org-directory)) yal/launchable-items-emacs)
    (push `("beorg: ACTIONS" . ,(expand-file-name "ACTIONS.org" org-directory)) yal/launchable-items-emacs)
    (push `("beorg: B-PROJECTS" . ,(expand-file-name "B-PROJECTS.org" org-directory)) yal/launchable-items-emacs)
    (push `("beorg: B-PROJECT-Backup" . ,(expand-file-name "B-PROJECT-Backup.org" org-directory)) yal/launchable-items-emacs)
    (push `("beorg: C-CHECK-FOR-CANCELLATION" . ,(expand-file-name "C-CHECK-FOR-CANCELLATION.org" org-directory)) yal/launchable-items-emacs)
    (push `("beorg: H-HABITS" . ,(expand-file-name "H-HABITS.org" org-directory)) yal/launchable-items-emacs)
    (push `("beorg: refile-beorg" . ,(expand-file-name "refile-beorg.org" org-directory)) yal/launchable-items-emacs)
    (push `("beorg: refile-drafts" . ,(expand-file-name "refile-drafts.org" org-directory)) yal/launchable-items-emacs)
    (push `("beorg: misc" . ,(expand-file-name "misc.org" org-directory)) yal/launchable-items-emacs)
    (push `("beorg: notes" . ,(expand-file-name "notes.org" org-directory)) yal/launchable-items-emacs)

    ;; add archive directory of current dir if it exists
    (if (file-directory-p (expand-file-name (format-time-string "%Y") (expand-file-name "archive" org-directory)))
        (push `("tasks: archive directory current year" . ,(expand-file-name (format-time-string "%Y") (expand-file-name "archive" org-directory))) yal/launchable-items-emacs)))

    (when (boundp 'dh/dropbox-dir)
      ;; Dropbox root, org & dahan_uberspace is in all my dropboxes
      (push `("dropbox: root directory" . ,(expand-file-name dh/dropbox-dir)) yal/launchable-items-emacs)
      (push `("dropbox: dahan_uberspace directory" . ,(expand-file-name "dahan_uberspace" dh/dropbox-dir)) yal/launchable-items-emacs)

      ;; other directories are only in some, if one (e.g. dahan_text) is there,
      ;; the other will also be there
      (when (boundp 'dh/dropbox-full-available)
        (push `("dropbox: dahan_text directory" . ,(expand-file-name "dahan_text" dh/dropbox-dir)) yal/launchable-items-emacs)
        (push `("dropbox: dahan_notebooks directory" . ,(expand-file-name "dahan_notebooks" dh/dropbox-dir)) yal/launchable-items-emacs)
        (push `("dropbox: dahan_letters directory" . ,(expand-file-name "dahan_letters" dh/dropbox-dir)) yal/launchable-items-emacs)
        (push `("dropbox: dahan_ulysses directory" . ,(expand-file-name "dahan_ulysses" dh/dropbox-dir)) yal/launchable-items-emacs)
        (push `("dropbox: dahan_LaTeX directory" . ,(expand-file-name "dahan_LaTeX" dh/dropbox-dir)) yal/launchable-items-emacs)))

    (when (string-equal system-type "windows-nt")
      (when (file-directory-p (expand-file-name "D:\\git-repositories"))
        (push `("dired: git-repositories-dir" . ,(expand-file-name "D:\\git-repositories")) yal/launchable-items-emacs)))
    ;; yal/launchable-items-system

    (when (string-equal system-type "windows-nt")
      (push `("windows: user directory" . ,(expand-file-name dh/user-dir)) yal/launchable-items-system)
      (push `("windows: download directory" . ,(expand-file-name "Downloads" dh/user-dir)) yal/launchable-items-system)
      (push `("windows: picture directory" . ,(expand-file-name "Pictures" dh/user-dir)) yal/launchable-items-system)
      (push `("windows: appdata directory" . ,(expand-file-name "AppData" dh/user-dir)) yal/launchable-items-system)
      (push `("windows: desktop directory" . ,(expand-file-name "Desktop" dh/user-dir)) yal/launchable-items-system)
      (push `("windows: tmp directory" . ,(expand-file-name (getenv "TMPDIR"))) yal/launchable-items-system)
      (when (boundp 'dh/emacs-portable-dir)
        (push `("windows: emacs-portable-dir" . ,(expand-file-name dh/emacs-portable-dir)) yal/launchable-items-emacs))
      (when (file-directory-p (expand-file-name "D:\\git-repositories"))
        (push `("windows: git-repositories-dir" . ,(expand-file-name "D:\\git-repositories")) yal/launchable-items-emacs)))

    ;; if my full Dropbox is there, that means more directories besides org and dahan_uberspace
    (when (and (boundp 'dh/dropbox-dir) (boundp 'dh/dropbox-full-available))
      (push `("ebook: markdown-mode" . ,(expand-file-name "dahan_ebooks/Verlage/LeanPub/markdown-mode.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      ;; (push `("ebook: " . ,(expand-file-name "dahan_ebooks/Lisp_Scheme_Haskell/.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: little schemer" . ,(expand-file-name "dahan_ebooks/Lisp_Scheme_Haskell/The_Little_Schemer_4th_2.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: seasoned schemer" . ,(expand-file-name "dahan_ebooks/Lisp_Scheme_Haskell/The Seasoned Schemer - Daniel P. Friedman.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: common lisp - krusenotto" . ,(expand-file-name "dahan_ebooks/Lisp_Scheme_Haskell/Funktionale+Programmierung+und+Metaprogr.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: little lisper" . ,(expand-file-name "dahan_ebooks/Lisp_Scheme_Haskell/__The_Little_LISPer___3rd_Edition.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: common lisp - touretzky" . ,(expand-file-name "dahan_ebooks/Lisp_Scheme_Haskell/Common Lisp A Gentle Introduction to Symbolic Computation David Touretzky.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: 57 exercises for programmers" . ,(expand-file-name "dahan_ebooks/Verlage/PragProg/exercises-for-programmers_p1_0.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: tmux 2" . ,(expand-file-name "dahan_ebooks/Verlage/PragProg/tmux-2_p1_0.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: practical vim" . ,(expand-file-name "dahan_ebooks/Verlage/PragProg/practical-vim-second-edition_p2_0.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: modern vim" . ,(expand-file-name "dahan_ebooks/Verlage/PragProg/modern-vim_p1_0.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: mastering emacs" . ,(expand-file-name "dahan_ebooks/Verlage/mastering-emacs-v2.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: the latex companion" . ,(expand-file-name "dahan_ebooks/Verlage/InformIT/TheLaTeXCompanion_2ed.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: working the command line" . ,(expand-file-name "dahan_ebooks/Verlage/A Book apart/working-the-command-line.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: webfont handbook" . ,(expand-file-name "dahan_ebooks/Verlage/webfont-handbook.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: on web typography" . ,(expand-file-name "dahan_ebooks/Verlage/A Book apart/On-Web-Typography.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: making sense of color management" . ,(expand-file-name "dahan_ebooks/Verlage/A Book apart/making-sense-of-color-management.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: javascript for webdesigners" . ,(expand-file-name "dahan_ebooks/Verlage/A Book apart/javascript-for-web-designers.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: git for humans" . ,(expand-file-name "dahan_ebooks/Verlage/A Book apart/git-for-humans.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: learn git (tower)" . ,(expand-file-name "dahan_ebooks/Verlage/learn-git-ebook/learn version control with git.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: demystifying-public-speaking" . ,(expand-file-name "dahan_ebooks/Verlage/A Book apart/demystifying-public-speaking.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: css3 for web designers" . ,(expand-file-name "dahan_ebooks/Verlage/A Book apart/CSS3-for-Web-Designers-2e.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: Automate the Boring Stuff with Python" . ,(expand-file-name "dahan_ebooks/Verlage/NoStarch/AutomatetheBoringStuffwithPython.pdf" dh/dropbox-dir)) yal/launchable-items-system)

      ;; (push `("ebook: " . ,(expand-file-name "apps\O'Reilly Media//.pdf" dh/dropbox-dir)) yal/launchable-items-system)

      (push `("ebook: Land of Lisp" . ,(expand-file-name "apps/O'Reilly Media/Land of Lisp/Land of Lisp.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: Lauren Ipsum" . ,(expand-file-name "apps/O'Reilly Media/Lauren Ipsum/Lauren Ipsum.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: Learning GNU Emacs" . ,(expand-file-name "apps/O'Reilly Media/Learning GNU Emacs/Learning GNU Emacs.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: Learning the bash Shell" . ,(expand-file-name "apps/O'Reilly Media/Learning the bash Shell/Learning the bash Shell.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: Learning JavaScript" . ,(expand-file-name "apps/O'Reilly Media/Learning JavaScript/Learning JavaScript.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: Programming Rust" . ,(expand-file-name "apps/O'Reilly Media/Programming Rust/Programming_Rust.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: Youâre My Favorite Client" . ,(expand-file-name "apps/O'Reilly Media/Youâre My Favorite Client/Youâre My Favorite Client.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: Writing GNU Emacs Extensions" . ,(expand-file-name "apps/O'Reilly Media/Writing GNU Emacs Extensions/Writing GNU Emacs Extensions.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: Think Python" . ,(expand-file-name "apps/O'Reilly Media/Think Python/Think Python.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: Regular Expressions Cookbook" . ,(expand-file-name "apps/O'Reilly Media/Regular Expressions Cookbook/Regular Expressions Cookbook.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: Python Cookbook" . ,(expand-file-name "apps/O'Reilly Media/Python Cookbook/Python Cookbook.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: Introducing Python" . ,(expand-file-name "apps/O'Reilly Media/Introducing Python/Introducing Python.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: Head First Python" . ,(expand-file-name "apps/O'Reilly Media/Head First Python/Head First Python.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: Head First PMP" . ,(expand-file-name "apps/O'Reilly Media/Head First PMP/Head First PMP.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: Head First JavaScript Programming" . ,(expand-file-name "apps/O'Reilly Media/Head First JavaScript Programming/Head First JavaScript Programming.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: Head First Data Analysis" . ,(expand-file-name "apps/O'Reilly Media/Head First Data Analysis/Head First Data Analysis.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: Fluent Python" . ,(expand-file-name "apps/O'Reilly Media/Fluent Python/Fluent Python.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: Discussing Design" . ,(expand-file-name "apps/O'Reilly Media/Discussing Design/Discussing Design.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: Design for Real Life" . ,(expand-file-name "apps/O'Reilly Media/Design for Real Life/Design for Real Life.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: Just Enough Research" . ,(expand-file-name "apps/O'Reilly Media/Just Enough Research/Just Enough Research.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: bash Cookbook" . ,(expand-file-name "apps/O'Reilly Media/bash Cookbook/bash Cookbook.pdf" dh/dropbox-dir)) yal/launchable-items-system)
      (push `("ebook: CSS3 The Missing Manual" . ,(expand-file-name "apps/O'Reilly Media/CSS3_ The Missing Manual/CSS3_ The Missing Manual.pdf" dh/dropbox-dir)) yal/launchable-items-system)

      )


    ;; yal/launchable-items-url

    (push '("elisp: Xah Elisp Tutorial - associated lists" . "http://ergoemacs.org/emacs_manual/elisp/Association-Lists.html") yal/launchable-items-url)
    (push '("elisp: Xah Elisp Tutorial - hashmaps" . "http://ergoemacs.org/emacs/elisp_hash_table.html") yal/launchable-items-url)
    (push '("Endless Parentheses: Magit keychords" . "http://endlessparentheses.com/it-s-magit-and-you-re-the-magician.html") yal/launchable-items-url)
    (push '("guide: Pandoc User" . "https://pandoc.org/MANUAL.html") yal/launchable-items-url)
    (push '("guide: Pandoc-mode" . "https://joostkremers.github.io/pandoc-mode/") yal/launchable-items-url)
    (push '("emacs-packagedev: Contributing to MELPA" . "https://github.com/melpa/melpa/blob/master/CONTRIBUTING.md") yal/launchable-items-url)
    (push '("emacs-packagedev: marmalade-package (from webarchive)" . "https://web.archive.org/web/20111120220609/http://marmalade-repo.org/doc-files/package.5.html") yal/launchable-items-url)
    (push '("emacs-packagedev: elisp conventions" . "https://www.gnu.org/software/emacs/manual/html_node/elisp/Tips.html") yal/launchable-items-url)
    (push '("emacs-guide: Markdown-mode" . "https://jblevins.org/projects/markdown-mode/") yal/launchable-items-url)
    (push '("emacs-guide: orgmode manual" . "http://orgmode.org/org.html") yal/launchable-items-url)
    (push '("emacs-guide: orgmode compact guide" . "http://orgmode.org/guide") yal/launchable-items-url)
    (push '("emacs-guide: Magit" . "https://magit.vc/manual/magit.html#Top") yal/launchable-items-url)
    (push '("github: elisp-playground (url)" . "https://github.com/dahanbn/elisp-playground") yal/launchable-items-url)
    (push '("github: .emacs.d (url)" . "https://github.com/dahanbn/.emacs.d") yal/launchable-items-url)
    (push '("github: .emacs.d (config.org - raw)" . "https://raw.githubusercontent.com/dahanbn/.emacs.d/master/config.org") yal/launchable-items-url)
    (push '("github: portable-emacs-win64 (url)" . "https://github.com/dahanbn/portable-emacs-win64") yal/launchable-items-url)
    (push '("github: 57 Exercises for Programmers" . "https://github.com/dahanbn/57-Exercises-for-Programmers") yal/launchable-items-url)
    (push '("github: Yet Another Launcher for Sublime (url)" . "https://github.com/dahanbn/Yet-Another-Launcher") yal/launchable-items-url)
    (push '("Beihilfe - Ansprechpartner und Adresse" . "http://www.bva.bund.de/DE/Organisation/Abteilungen/Abteilung_VII/020_Beihilfe/110_Ansprechpartner/beihilfestelle_DZB_bad_homburg.html?nn=4485804") yal/launchable-items-url)
    (push '("Beihilfe - Formulare - Anlage Zusammenstellung Belege" . "http://www.bva.bund.de/SharedDocs/Downloads/DE/DLZ/Vordrucke/Beihilfe/1a_Anlage_Zusammenstellung.html") yal/launchable-items-url)
    (push '("Beihilfe - Formulare - Antrag auf Beihilfe" . "http://www.bva.bund.de/SharedDocs/Downloads/DE/DLZ/Vordrucke/Beihilfe/1_Antrag_Beihilfe_FFW.html") yal/launchable-items-url)
#+end_src

** yet-another-launcher package-content
Content of the future package

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x y") 'yet-another-launcher)

  (setq yal/completing-backend "ivy")

  ;; private functions

  (defun yal--set-completing-backend ()
    "sets the completing backend that is used by yet-another-launcher"


    (cond
     ((boundp 'yal/completing-backend) ; check if yal/completing-backend exists
      (message "backend is set to: %s" yal/completing-backend))
     ((featurep 'ivy)                     ; use ivy if it's there
      )
     ((featurep 'helm)                    ; use helm if it's there
      )
     ((featurep 'ido)                   ; use ido, because it's built in
      )
     
     ))

  (defun yal--generate-hash-from-list (item-list item-type)
    "generates the hash"
    (while item-list
      (puthash (car (car item-list))      ; name of the item
               (list
                item-type                 ; type of the item
                (cdr (car item-list))     ; address of the item)
                )
               yal/yal-items              ; name of the hash
               )
      (pop item-list)                    ; remove current pair from list
      ))

  (defun yal--init ()
    "initializes the launchables items from yet-another-launcher"

    ;; creating hash-table that will contain all launchable items
    ;; it should be in the global namespace
    ;; if rerun yal--init will each time create a new hash-table
    (setq yal/yal-items (make-hash-table :test 'equal))


    ;; filling the hash-table with content

    ;; checking if at least one of the following associated lists are set
    ;; yal/launchable-items-emacs         for items to launch in Emacs
    ;; yal/launchable-items-system        for items to launch with default app
    ;; yal/launchable-items-url           for items to launch in a browser
    (unless (or (boundp 'yal/launchable-items-emacs)
                (boundp 'yal/launchable-items-system)
                (boundp 'yal/launchable-items-url))
      (message "yal-error: At least you have to define yal/launchable-items-emacs, yal/launchable-items-system or yal/launchable-items-url"))

    (if (boundp 'yal/launchable-items-system)
        (yal--generate-hash-from-list yal/launchable-items-system "system"))

    (if (boundp 'yal/launchable-items-emacs)
        (yal--generate-hash-from-list yal/launchable-items-emacs "emacs"))

    (if (boundp 'yal/launchable-items-url)
        (yal--generate-hash-from-list yal/launchable-items-url "url")))

  ;; public functions

  (defun yet-another-launcher ()
    "launches local files in Emacs or with the OS corresponding launcher"
    (interactive)
    (require 'ivy)

    ;; check if the hash yal/yal-items exist, otherwise call yal--init
    (unless (boundp 'yal/yal-items)
      (yal--init))

    ;; development run yal--init everytime
    (yal--init)

    (let ((file-key
           (completing-read
            "yet-another-launcher: "      ; prompt
            yal/yal-items                 ; collection
            nil                           ; predicate
            nil                           ; require match
            nil                           ; initial input
            nil                           ; history
            nil                           ; value
            )) file-type file-name)
      (setq file-type (car (gethash file-key yal/yal-items)))
      (setq file-name (car (last (gethash file-key yal/yal-items))))
      (message "yal: %s -> %s -> %s" file-key file-type file-name)
      (cond
       ((string-equal file-type "emacs") ; open filen in a new Emacs buffer
        (if (file-exists-p file-name)
            (find-file file-name)
          (message "Error: Couldn't find %S" file-name)))
       ((string-equal file-type "system") ; launch it with os default application
        (if (file-exists-p file-name)
            (progn
              (cond
               ((string-equal system-type "windows-nt")
                (w32-shell-execute "open" file-name))))
          (message "Error: Couldn't find %S" file-name)))
       ((string-equal file-type "url") ; launch it with os default application
        ;; later I might add different browser support
        (cond
         ((string-equal system-type "windows-nt")
          (w32-shell-execute "open" file-name))
         ((string-equal system-type "gnu/linux")
          (unless (display-graphic-p)     ; without graphical interface
            (when (fboundp 'eww)          ; and eww is available
              (eww-browse-url file-name)))))))))
#+end_src

** cleaning recentf up 
To get rid of all the .*autoloads.el in recentf I have to manually 
launch recentf-cleanup as one of my last commands. 
#+begin_src emacs-lisp
  (recentf-cleanup)
#+end_src
** Last command at work
#+BEGIN_SRC emacs-lisp
  ; LAST COMMAND at work
  (when (boundp 'dh/me-at-work)
    ;; open my Current_Tasks.org file as last command
    (dh/open-file-in-emacs org-default-notes-file))
#+END_SRC
** Last command at not at work
#+BEGIN_SRC emacs-lisp
  ; LAST COMMAND at work
  (when (and
         (boundp 'dh/not-at-work)
         (boundp 'dh/beorg-dir))
    ;; open my ACTIONS.org file as last command
    (dh/open-file-in-emacs org-default-notes-file))
#+END_SRC


** Debugging off
Turn off debugging, now that initialization has ended

#+BEGIN_SRC emacs-lisp
  (setq debug-on-error nil)
#+END_SRC





