* my elisp playground

General useful ressources:
+ http://ergoemacs.org/emacs/elisp.html

* y-a-l idea

#+begin_src emacs-lisp
  ;; uses an associated list
  ;; http://ergoemacs.org/emacs/elisp_association_list.html
  ;; (cons a b) can also be written as (a . b).

  (setq yal-items1 (make-hash-table :test 'equal))
  (puthash "config.org - my emacs init file" (expand-file-name "config.org" user-emacs-directory) yal-items1)
  (puthash "elisp-playground.org" (expand-file-name "elisp-playground.org" user-emacs-directory) yal-items1)

  (setq yal-items (make-hash-table :test 'equal))

  (puthash "config.org" `("file" ,(expand-file-name "config.org" user-emacs-directory)) yal-items)
  (puthash "elisp-playground.org" `("file" ,(expand-file-name "elisp-playground.org" user-emacs-directory)) yal-items)
  (puthash "tmux2 ebook"  `("file+sys" ,(expand-file-name "C:\\Users\\bine\\Dropbox\\dahan_ebooks\\Verlage\\PragProg\\tmux-2_p1_0.pdf")) yal-items)

  (when (boundp 'dh/emacs-portable-dir)
    (puthash "PE: portable-emacs-win64.bat" (expand-file-name "portable-emacs-win64.bat" dh/emacs-portable-dir) yal-items1)
    (puthash "PE: git-pull-emacs-emacs.d.bat" (expand-file-name "git-pull-emacs-emacs.d.bat" dh/emacs-portable-dir) yal-items1))


  (defun yet-another-launcher ()
    "launches local files in Emacs or with the OS corresponding launcher"
    (interactive)
    (require 'ivy)

    (let ((file-key
           (ivy-completing-read
            "Style:"                      ; prompt
            yal-items                     ; collection
            nil                           ; predicate
            nil                           ; require match
            "^"                           ; initial input
            nil                           ; history
            nil                           ; value
            )) file-type file-name)
      (setq file-type (car (gethash file-key yal-items)))
      (setq file-name (car (last (gethash file-key yal-items))))
      (message "%s -> %s -> %s" file-key file-type file-name)
      (cond
       ((string-equal file-type "file") ; open filen in a new Emacs buffer
        (if (file-exists-p file-name)
            (find-file file-name)
          (message "Error: Couldn't find %S" file-name)))
       ((string-equal file-type "file+sys") ; launch it with os default application
        (if (file-exists-p file-name)
            (progn
              (cond
               ((string-equal system-type "windows-nt")
                (w32-shell-execute "open" file-name))))
          (message "Error: Couldn't find %S" file-name))))))
#+end_src 

* Examples from Xah
** Insert Date

modified it to play with ivy-completing-read

http://ergoemacs.org/emacs/elisp_insert-date-time.html

#+begin_src emacs-lisp
  (require 'ido) ; part of emacs

  (defun xah-insert-date ()
    "Insert current date and or time.
  Insert date in this format: yyyy-mm-dd.
  When called with `universal-argument', prompt for a format to use.
  If there's text selection, delete it first.

  Do not use this function in lisp code. Call `format-time-string' directly.

  URL `http://ergoemacs.org/emacs/elisp_insert-date-time.html'
  version 2016-12-18"
    (interactive)
    (when (use-region-p) (delete-region (region-beginning) (region-end)))
    (let (($style
           (if current-prefix-arg
               (string-to-number
                (substring
                 (ivy-completing-read
                  "Style:" ; prompt
                  '(
                    "1 → 2016-10-10 Monday"
                    "2 → 2016-10-10T19:39:47-07:00"
                    "3 → 2016-10-10 19:39:58-07:00"
                    "4 → Monday, October 10, 2016"
                    "5 → Mon, Oct 10, 2016"
                    "6 → October 10, 2016"
                    "7 → Oct 10, 2016") ; collection
                  nil ; predicate
                  nil ; require match
                  "^" ; initial input
                  nil ; history
                  "4" ; default value 
) 0 1))
             0)))
      (insert
       (cond
        ((= $style 0)
         (format-time-string "%Y-%m-%d")  ; "2016-10-10"
         )
        ((= $style 1)
         (format-time-string "%Y-%m-%d %A") ; "2016-10-10 Monday"
         )
        ((= $style 2)
         (concat
          (format-time-string "%Y-%m-%dT%T")
          (funcall (lambda ($x) (format "%s:%s" (substring $x 0 3) (substring $x 3 5))) (format-time-string "%z")))
         ;; eg "2016-10-10T19:02:23-07:00"
         )
        ((= $style 3)
         (concat
          (format-time-string "%Y-%m-%d %T")
          (funcall (lambda ($x) (format "%s:%s" (substring $x 0 3) (substring $x 3 5))) (format-time-string "%z")))
         ;; eg "2016-10-10 19:10:09-07:00"
         )
        ((= $style 4)
         (format-time-string "%A, %B %d, %Y")
         ;; eg "Monday, October 10, 2016"
         )
        ((= $style 5)
         (format-time-string "%a, %b %d, %Y")
         ;; eg "Mon, Oct 10, 2016"
         )
        ((= $style 6)
         (format-time-string "%B %d, %Y")
         ;; eg "October 10, 2016"
         )
        ((= $style 7)
         (format-time-string "%b %d, %Y")
         ;; eg "Oct 10, 2016"
         )
        (t
         (format-time-string "%Y-%m-%d"))))))
#+end_src




